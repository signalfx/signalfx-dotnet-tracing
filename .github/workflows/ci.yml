name: ci

on:
  push:
    branches:
    - main
    tags:
    - 'v*'
    paths-ignore:
    - dev/*
    - docs/*
# The following is a list of shared asset locations.
# This is the config for the Tracer CI pipeline,
# so we are excluding shared assets that are not currently used by the Tracer.
# We make this list granular, rather than catch-all, on purpose.
# It makes it easier to selectively remove items from the list, once the Tracer starts using them.
#   - The Managed Loader:
    - shared/samples/Datadog.AutoInstrumentation.ManagedLoader.Demo/*
    - shared/src/managed-lib/ManagedLoader/*
#   - Dynamic Bindings for DiagnosticSource:
    - shared/samples/Datadog.DynamicDiagnosticSourceBindings.Demo/*
    - shared/src/managed-lib/DynamicDiagnosticSourceBindings/*
#   - Logging demo samples:
    - shared/samples/Datadog.Logging.Demo/*
#   - Managed utility APIs (may be used transitively):
    - shared/src/managed-src/Datadog.Collections/*
    - shared/src/managed-src/Datadog.Util/*
#   - Managed Logging APIs (may be used transitively):    
    - shared/src/managed-src/Datadog.Logging.Emission/*
    - shared/src/managed-src/Datadog.Logging.Composition/*
    - shared/src/managed-src/Datadog.Logging/*
#   - Fmt lib:
    - shared/src/native-lib/fmt_x64-windows-static/*
    - shared/src/native-lib/fmt_x86-windows-static/*
#   - Spdlob lib:
    - shared/src/native-lib/spdlog/*
#   - Mics common native sources:
    - shared/src/native-src/*
  pull_request:
  workflow_dispatch:

env:
  buildConfiguration: Release
  dotnetSdkVersion: 6.0.100
  relativeTracerHome: /tracer/src/bin/windows-tracer-home
  relativeArtifacts: /tracer/src/bin/artifacts
  binDir: ${{ github.workspace }}/tracer/src/bin
  ddTracerHome: ${{ github.workspace }}/tracer/src/bin/dd-tracer-home
  tracerHome: ${{ github.workspace }}/tracer/src/bin/windows-tracer-home
  artifacts: ${{ github.workspace }}/tracer/src/bin/artifacts
  isMainBranch: $[eq(github.ref, 'refs/heads/main')]
  NugetPackageDirectory: ${{ github.workspace }}/packages
  relativeNugetPackageDirectory: packages
  dotnetToolTag: build-dotnet-tool
  Verify_DisableClipboard: true
  DiffEngine_Disabled: true

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        machine: [ windows-2019, ubuntu-20.04 ]
    runs-on: ${{ matrix.machine }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          2.1.x
          3.1.x
          5.0.x
          6.0.x
    - name: Install CMake 3.19.8
      if: ${{ runner.os == 'Linux' }}
      run: curl -sL https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.sh -o cmakeinstall.sh && chmod +x cmakeinstall.sh && sudo ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir
    - name: Install fpm
      if: ${{ runner.os == 'Linux' }}
      run: sudo gem install --no-document fpm
    - name: Build tracer home
      run: ./tracer/build.cmd BuildTracerHome PackageTracerHome
    - name: Publish tracer-home
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.tracerHome }}
        name: ${{ matrix.machine }}-tracer-home
    - name: Publish Windows x86 MSI
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.artifacts }}/x86/en-us
        name: windows-msi-x86
    - name: Publish Windows x64 MSI
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.artifacts }}/x64/en-us
        name: windows-msi-x64
    - name: Publish Linux x64 packages
      if: ${{ runner.os == 'Linux' }}
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.artifacts }}/linux-x64
        name: linux-x64-packages
    - name: Publish NuGet packages
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.artifacts }}/nuget/SignalFx.NET.Tracing.Azure.Site.Extension.*.nupkg
        name: nuget-packages

  managed-unit-tests:
    name: Managed unit tests
    strategy:
      fail-fast: false
      matrix:
        machine: [ windows-2019, ubuntu-20.04 ]
    runs-on: ${{ matrix.machine }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          2.1.x
          3.1.x
          5.0.x
          6.0.x
    - run: ./tracer/build.cmd BuildTracerHome BuildAndRunManagedUnitTests
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.machine }}-managed-unit-tests-build_data
        path: tracer/build_data
      if: (${{ job.status }} != 'cancelled')
      continue-on-error: true

  native-unit-tests:
    name: Native unit tests
    strategy:
      fail-fast: false
      matrix:
        machine: [ windows-2019, ubuntu-20.04 ]
    runs-on: ${{ matrix.machine }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          2.1.x
          3.1.x
          5.0.x
          6.0.x
    - name: Install CMake 3.19.8
      if: ${{ runner.os == 'Linux' }}
      run: curl -sL https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.sh -o cmakeinstall.sh && chmod +x cmakeinstall.sh && sudo ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir
    - run: ./tracer/build.cmd BuildTracerHome BuildAndRunNativeUnitTests

  integration-tests:
    name: Integration tests 
    strategy:
      fail-fast: false
      matrix:
        machine: [ windows-2019 ]
        platform: [ x64 ]
        framework: [ net461, netcoreapp3.1, net5.0, net6.0 ]
        target: [ BuildAndRunWindowsIntegrationTests, BuildAndRunWindowsRegressionTests ]
    runs-on: ${{ matrix.machine }}
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          2.1.x
          3.1.x
          5.0.x
          6.0.x
    - name: Start CosmosDB Emulator
      if: ${{ matrix.target == 'BuildAndRunWindowsIntegrationTests' }}
      shell: powershell
      run: |
        Write-Host "Starting CosmosDB Emulator"
        Import-Module "C:/Program Files/Azure Cosmos DB Emulator/PSModules/Microsoft.Azure.CosmosDB.Emulator"
        Start-CosmosDbEmulator -Timeout 300
    # Workaround around long name being hit in MultiDomainHostTests.WorksOutsideTheGAC tests
    - name: Subst for shorter path and Run Tests
      run: |
        subst y: .
        y:
        ./tracer/build.cmd BuildTracerHome ${{ matrix.target }} -Framework ${{ matrix.framework }} -TargetPlatform ${{ matrix.platform }} --PrintDriveSpace
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.machine }}-integration-tests-${{ matrix.platform }}-${{ matrix.framework }}-${{ matrix.target }}-build_data
        path: tracer/build_data
      if: (${{ job.status }} != 'cancelled')
      continue-on-error: true

  container-integration-tests:
    name: Container Integration tests 
    strategy:
      fail-fast: false
      matrix:
        #TODO: base-image: [ debian, alpine ]
        base-image: [ debian ]
        framework: [ netcoreapp3.1, net5.0, net6.0 ]
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          2.1.x
          3.1.x
          5.0.x
          6.0.x
    - name: Build Docker image
      run: |
        docker build \
          --build-arg DOTNETSDK_VERSION=${dotnetSdkVersion} \
          --tag dd-trace-dotnet/${{ matrix.base-image }}-builder \
          --target builder \
          --file "./tracer/build/_build/docker/${{ matrix.base-image }}.dockerfile" \
          "./tracer/build/_build"
    - name: Build integration tests in Docker container
      run: |
        docker run --rm \
          --mount type=bind,source="${GITHUB_WORKSPACE}",target=/project \
          --env NugetPackageDirectory=/project/$(relativeNugetPackageDirectory) \
          --env tracerHome=/project/${relativeTracerHome} \
          --env artifacts=/project/${relativeArtifacts} \
          --env SIGNALFX_CLR_ENABLE_NGEN=${SIGNALFX_CLR_ENABLE_NGEN} \
          dd-trace-dotnet/${{ matrix.base-image }}-builder \
          dotnet /build/bin/Debug/_build.dll BuildTracerHome BuildLinuxIntegrationTests -Framework ${{ matrix.framework }}
    - name: Start dependencies
      run: docker-compose run --rm StartDependencies
    - name: Run integration tests in container
      run: | 
        framework=${{ matrix.framework }} baseImage=${{ matrix.base-image }} docker-compose run --rm \
          -e baseImage=${{ matrix.base-image }} \
          -e framework=${{ matrix.framework }} \
          -e Verify_DisableClipboard=true \
          -e DiffEngine_Disabled=true \
          IntegrationTests
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.base-image }}-integration-tests-${{ matrix.framework }}-build_data
        path: tracer/build_data
      if: (${{ job.status }} != 'cancelled')
      continue-on-error: true

  windows-iis-integration-tests:
    name: Windows - IIS integration tests 
    runs-on: windows-2019
    strategy:
      matrix:
        platform:
        - x64
        framework: [ netcoreapp3.1, net461 ]
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          2.1.x
          3.1.x
          5.0.x
          6.0.x
    - run: ./tracer/build.cmd BuildTracerHome PackageTracerHome BuildWindowsIntegrationTests -Framework ${{ matrix.framework }}
    - name: docker-compose build IIS containers
      run: docker-compose build --build-arg dotnet_tracer_msi=.$relativeArtifacts/{{ matrix.platform }}/en-us/*.msi --build-arg ENABLE_32_BIT=${{ env.enable32bit }} IntegrationTests.IIS
    - name: docker-compose start IIS containers
      run: docker-compose up -d IntegrationTests.IIS
    # Workaround around long name being hit in MultiDomainHostTests.WorksInsideTheGAC tests
    - name: RunWindowsIisIntegrationTests
      run: |
        subst y: .
        y:
        ./tracer/build.cmd RunWindowsIisIntegrationTests -Framework ${{ matrix.framework }}
    - name: docker-compose stop services
      run: docker-compose down
      if: (${{ job.status }} != 'cancelled')
    - uses: actions/upload-artifact@v2
      with:
        name: windows-iis-integration-tests-${{ matrix.platform }}-build_data
        path: tracer/build_data
      if: (${{ job.status }} != 'cancelled')
      continue-on-error: true
