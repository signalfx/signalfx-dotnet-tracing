[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/signalfx/signalfx-dotnet-tracing.git")]

namespace Datadog.Trace.Configuration
{
    public class CompositeConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource, System.Collections.Generic.IEnumerable<Datadog.Trace.Configuration.IConfigurationSource>, System.Collections.IEnumerable
    {
        public CompositeConfigurationSource() { }
        public void Add(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public bool? GetBool(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public double? GetDouble(string key) { }
        public int? GetInt32(string key) { }
        public string GetString(string key) { }
        public void Insert(int index, Datadog.Trace.Configuration.IConfigurationSource item) { }
    }
    public enum ConventionType
    {
        Default = 0,
        OpenTelemetry = 1,
        Datadog = 2,
    }
    public class EnvironmentConfigurationSource : Datadog.Trace.Configuration.StringConfigurationSource
    {
        public EnvironmentConfigurationSource() { }
        public override string GetString(string key) { }
    }
    public class ExporterSettings
    {
        public const string DefaultAgentHost = "localhost";
        public const int DefaultAgentPort = 9411;
        public ExporterSettings() { }
        public ExporterSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public System.Uri AgentUri { get; set; }
        public int DogStatsdPort { get; set; }
        public System.Uri MetricsEndpointUrl { get; set; }
        public string MetricsPipeName { get; set; }
        public bool PartialFlushEnabled { get; set; }
        public int PartialFlushMinSpans { get; set; }
        public string TracesPipeName { get; set; }
        public int TracesPipeTimeoutMs { get; set; }
    }
    public enum ExporterType
    {
        Default = 0,
        DatadogAgent = 1,
        Zipkin = 0,
    }
    public class GlobalSettings
    {
        public bool DebugEnabled { get; }
        public bool FileLogEnabled { get; }
        public bool StdoutLogEnabled { get; }
        public static Datadog.Trace.Configuration.GlobalSettings FromDefaultSources() { }
        public static void Reload() { }
        public static void SetDebugEnabled(bool enabled) { }
    }
    public interface IConfigurationSource
    {
        bool? GetBool(string key);
        System.Collections.Generic.IDictionary<string, string> GetDictionary(string key);
        System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings);
        double? GetDouble(string key);
        int? GetInt32(string key);
        string GetString(string key);
    }
    public class ImmutableExporterSettings
    {
        public ImmutableExporterSettings(Datadog.Trace.Configuration.ExporterSettings settings) { }
        public ImmutableExporterSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public System.Uri AgentUri { get; }
        public int DogStatsdPort { get; }
        public System.Uri MetricsEndpointUrl { get; }
        public string MetricsPipeName { get; }
        public bool PartialFlushEnabled { get; }
        public int PartialFlushMinSpans { get; }
        public string TracesPipeName { get; }
        public int TracesPipeTimeoutMs { get; }
    }
    public class ImmutableIntegrationSettings
    {
        public bool? AnalyticsEnabled { get; }
        public double AnalyticsSampleRate { get; }
        public bool? Enabled { get; }
        public string IntegrationName { get; }
    }
    public class ImmutableIntegrationSettingsCollection
    {
        public Datadog.Trace.Configuration.ImmutableIntegrationSettings this[string integrationName] { get; }
    }
    public class ImmutableTracerSettings
    {
        public ImmutableTracerSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public ImmutableTracerSettings(Datadog.Trace.Configuration.TracerSettings settings) { }
        [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
            "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
        public bool AnalyticsEnabled { get; }
        public Datadog.Trace.Configuration.ConventionType Convention { get; }
        public string CustomSamplingRules { get; }
        public string Environment { get; }
        public Datadog.Trace.Configuration.ExporterType Exporter { get; }
        public Datadog.Trace.Configuration.ImmutableExporterSettings ExporterSettings { get; }
        public double? GlobalSamplingRate { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> GlobalTags { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> HeaderTags { get; }
        public Datadog.Trace.Configuration.ImmutableIntegrationSettingsCollection Integrations { get; }
        public bool KafkaCreateConsumerScopeEnabled { get; }
        public bool LogsInjectionEnabled { get; }
        public int MaxTracesSubmittedPerSecond { get; }
        public Datadog.Trace.SignalFx.Metrics.MetricsExporterType MetricsExporter { get; }
        public System.Collections.Generic.HashSet<string> Propagators { get; }
        public int RecordedValueMaxLength { get; }
        public string ServiceName { get; }
        public string ServiceVersion { get; }
        public bool StartupDiagnosticLogEnabled { get; }
        public bool TagElasticsearchQueries { get; }
        public bool TagRedisCommands { get; }
        public bool ThreadSamplingEnabled { get; }
        public System.TimeSpan ThreadSamplingPeriod { get; }
        public bool TraceEnabled { get; }
        public bool TracerMetricsEnabled { get; }
        public string TracesTransport { get; }
        public static Datadog.Trace.Configuration.ImmutableTracerSettings FromDefaultSources() { }
    }
    public class IntegrationSettings
    {
        public IntegrationSettings(string integrationName, Datadog.Trace.Configuration.IConfigurationSource source) { }
        public bool? AnalyticsEnabled { get; set; }
        public double AnalyticsSampleRate { get; set; }
        public bool? Enabled { get; set; }
        public string IntegrationName { get; }
    }
    public class IntegrationSettingsCollection
    {
        public IntegrationSettingsCollection(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public Datadog.Trace.Configuration.IntegrationSettings this[string integrationName] { get; }
    }
    public class JsonConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource
    {
        public JsonConfigurationSource(string json) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public T GetValue<T>(string key) { }
        public override string ToString() { }
        public static Datadog.Trace.Configuration.JsonConfigurationSource FromFile(string filename) { }
    }
    public class NameValueConfigurationSource : Datadog.Trace.Configuration.StringConfigurationSource
    {
        public NameValueConfigurationSource(System.Collections.Specialized.NameValueCollection nameValueCollection) { }
        public override string GetString(string key) { }
    }
    public abstract class StringConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource
    {
        protected StringConfigurationSource() { }
        public virtual bool? GetBool(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public double? GetDouble(string key) { }
        public virtual int? GetInt32(string key) { }
        public abstract string GetString(string key);
        public static System.Collections.Generic.IDictionary<string, string> ParseCustomKeyValues(string data) { }
        public static System.Collections.Generic.IDictionary<string, string> ParseCustomKeyValues(string data, bool allowOptionalMappings) { }
    }
    public class TracerSettings
    {
        public TracerSettings() { }
        public TracerSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
            "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
        public bool AnalyticsEnabled { get; set; }
        public Datadog.Trace.Configuration.ConventionType Convention { get; set; }
        public string CustomSamplingRules { get; set; }
        public bool DiagnosticSourceEnabled { get; set; }
        public System.Collections.Generic.HashSet<string> DisabledIntegrationNames { get; set; }
        public string Environment { get; set; }
        public Datadog.Trace.Configuration.ExporterType Exporter { get; set; }
        public Datadog.Trace.Configuration.ExporterSettings ExporterSettings { get; set; }
        public double? GlobalSamplingRate { get; set; }
        public System.Collections.Generic.IDictionary<string, string> GlobalTags { get; set; }
        public System.Collections.Generic.IDictionary<string, string> HeaderTags { get; set; }
        public Datadog.Trace.Configuration.IntegrationSettingsCollection Integrations { get; }
        public bool KafkaCreateConsumerScopeEnabled { get; set; }
        public bool LogsInjectionEnabled { get; set; }
        public int MaxTracesSubmittedPerSecond { get; set; }
        public Datadog.Trace.SignalFx.Metrics.MetricsExporterType MetricsExporter { get; set; }
        public System.Collections.Generic.HashSet<string> Propagators { get; set; }
        public int RecordedValueMaxLength { get; set; }
        public bool RuntimeMetricsEnabled { get; set; }
        public string ServiceName { get; set; }
        public string ServiceVersion { get; set; }
        public string SignalFxAccessToken { get; set; }
        public bool StartupDiagnosticLogEnabled { get; set; }
        public bool TagElasticsearchQueries { get; set; }
        public bool TagMongoCommands { get; set; }
        public bool TagRedisCommands { get; set; }
        public bool TraceEnabled { get; set; }
        public bool TraceResponseHeaderEnabled { get; set; }
        public bool TracerMetricsEnabled { get; set; }
        public string TracesTransport { get; set; }
        public Datadog.Trace.Configuration.ImmutableTracerSettings Build() { }
        public void SetHttpClientErrorStatusCodes(System.Collections.Generic.IEnumerable<int> statusCodes) { }
        public void SetHttpServerErrorStatusCodes(System.Collections.Generic.IEnumerable<int> statusCodes) { }
        public void SetServiceNameMappings(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> mappings) { }
        public static Datadog.Trace.Configuration.CompositeConfigurationSource CreateDefaultConfigurationSource() { }
        public static Datadog.Trace.Configuration.TracerSettings FromDefaultSources() { }
    }
}
namespace Datadog.Trace.Configuration.Types
{
    public static class PropagatorTypes
    {
        public const string B3 = "B3";
        public const string Datadog = "Datadog";
        public const string W3C = "W3C";
    }
}
namespace Datadog.Trace.Conventions
{
    public interface ITraceIdConvention
    {
        Datadog.Trace.TraceId CreateFromString(string id);
        Datadog.Trace.TraceId GenerateNewTraceId();
    }
}
namespace Datadog.Trace
{
    public static class CorrelationIdentifier
    {
        public static string Env { get; }
        public static string Service { get; }
        public static ulong SpanId { get; }
        public static Datadog.Trace.TraceId TraceId { get; }
        public static string Version { get; }
    }
    public interface IScope : System.IDisposable
    {
        Datadog.Trace.ISpan Span { get; }
        void Close();
    }
    public interface ISpan : System.IDisposable
    {
        Datadog.Trace.ISpanContext Context { get; }
        bool Error { get; set; }
        string LogicScope { get; set; }
        string OperationName { get; set; }
        string ResourceName { get; set; }
        string ServiceName { get; set; }
        ulong SpanId { get; }
        Datadog.Trace.SpanStatus Status { get; set; }
        Datadog.Trace.TraceId TraceId { get; }
        string Type { get; set; }
        void Finish();
        void Finish(System.DateTimeOffset finishTimestamp);
        string GetTag(string key);
        void SetException(System.Exception exception);
        Datadog.Trace.ISpan SetTag(string key, string value);
    }
    public interface ISpanContext
    {
        string ServiceName { get; }
        ulong SpanId { get; }
        Datadog.Trace.TraceId TraceId { get; }
    }
    public interface ITracer
    {
        Datadog.Trace.IScope ActiveScope { get; }
        Datadog.Trace.Configuration.ImmutableTracerSettings Settings { get; }
        Datadog.Trace.IScope StartActive(string operationName);
        Datadog.Trace.IScope StartActive(string operationName, Datadog.Trace.SpanCreationSettings settings);
    }
    public enum SamplingPriority
    {
        UserReject = -1,
        AutoReject = 0,
        AutoKeep = 1,
        UserKeep = 2,
    }
    public static class ServerTimingHeader
    {
        public const string Key = "Server-Timing";
        public static void SetHeaders<T>(Datadog.Trace.SpanContext context, T carrier, System.Action<T, string, string> setter) { }
    }
    public class SpanContext : Datadog.Trace.ISpanContext, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string, string>>, System.Collections.Generic.IReadOnlyDictionary<string, string>, System.Collections.IEnumerable
    {
        public SpanContext(Datadog.Trace.TraceId? traceId, ulong spanId, string traceState) { }
        public SpanContext(Datadog.Trace.TraceId? traceId, ulong spanId, Datadog.Trace.SamplingPriority? samplingPriority = default, string serviceName = null) { }
        public Datadog.Trace.ISpanContext Parent { get; }
        public ulong? ParentId { get; }
        public string ServiceName { get; set; }
        public ulong SpanId { get; }
        public Datadog.Trace.TraceId TraceId { get; }
    }
    public struct SpanCreationSettings
    {
        public bool? FinishOnClose { get; set; }
        public Datadog.Trace.ISpanContext Parent { get; set; }
        public System.DateTimeOffset? StartTime { get; set; }
    }
    public static class SpanKinds
    {
        public const string Client = "client";
        public const string Consumer = "consumer";
        public const string Producer = "producer";
        public const string Server = "server";
    }
    public readonly struct SpanStatus : System.IEquatable<Datadog.Trace.SpanStatus>
    {
        public static readonly Datadog.Trace.SpanStatus Error;
        public static readonly Datadog.Trace.SpanStatus Ok;
        public static readonly Datadog.Trace.SpanStatus Unset;
        public Datadog.Trace.StatusCode StatusCode { get; }
        public bool Equals(Datadog.Trace.SpanStatus other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(Datadog.Trace.SpanStatus status1, Datadog.Trace.SpanStatus status2) { }
        public static bool operator ==(Datadog.Trace.SpanStatus status1, Datadog.Trace.SpanStatus status2) { }
    }
    public static class SpanTypes
    {
        public const string Benchmark = "benchmark";
        public const string Build = "build";
        public const string Custom = "custom";
        public const string Db = "db";
        public const string Http = "http";
        public const string Queue = "queue";
        public const string Serverless = "serverless";
        public const string Sql = "sql";
        public const string Test = "test";
        public const string Topic = "topic";
        public const string Web = "web";
    }
    public enum StatusCode
    {
        Unset = 0,
        Ok = 1,
        Error = 2,
    }
    public static class Tags
    {
        public const string DbName = "db.name";
        public const string DbOperation = "db.operation";
        public const string DbStatement = "db.statement";
        public const string DbType = "db.system";
        public const string DbUser = "db.user";
        public const string Env = "deployment.environment";
        public const string Error = "error";
        public const string ErrorMsg = "sfx.error.message";
        public const string ErrorStack = "sfx.error.stack";
        public const string ErrorType = "sfx.error.kind";
        public const string HttpMethod = "http.method";
        public const string HttpRequestHeadersHost = "http.host";
        public const string HttpStatusCode = "http.status_code";
        public const string HttpUrl = "http.url";
        public const string InstrumentationName = "component";
        public const string InstrumentedMethod = "instrumented.method";
        public const string Language = "language";
        public const string ManualDrop = "manual.drop";
        public const string ManualKeep = "manual.keep";
        public const string MessageSize = "message.size";
        public const string OutHost = "net.peer.name";
        public const string OutPort = "net.peer.port";
        public const string SamplingPriority = "sampling.priority";
        public const string SignalFxLibrary = "signalfx.tracing.library";
        public const string SignalFxVersion = "signalfx.tracing.version";
        public const string SpanKind = "span.kind";
        public const string SqlQuery = "sql.query";
        public const string SqlRows = "sql.rows";
        public const string Version = "version";
        public static class Messaging
        {
            public const string ConsumerId = "messaging.consumer_id\t";
            public const string ConversationId = "messaging.conversation_id";
            public const string Destination = "messaging.destination";
            public const string DestinationKind = "messaging.destination_kind";
            public const string MessageId = "messaging.message_id";
            public const string MessageSize = "messaging.message_payload_size_bytes";
            public const string MessageSizeCompressed = "messaging.message_payload_compressed_size_bytes";
            public const string Operation = "messaging.operation";
            public const string Protocol = "messaging.protocol";
            public const string ProtocolVersion = "messaging.protocol_version";
            public const string System = "messaging.system";
            public const string TempDestination = "messaging.temp_destination";
            public const string Url = "messaging.url";
        }
        public static class Net
        {
            public const string PeerIP = "net.peer.ip";
            public const string PeerName = "net.peer.name";
            public const string PeerPort = "net.peer.port";
        }
        public static class RabbitMq
        {
            public const string RoutingKey = "messaging.rabbitmq.routing_key";
        }
    }
    public readonly struct TraceId : System.IEquatable<Datadog.Trace.TraceId>
    {
        public ulong Higher { get; }
        public ulong Lower { get; }
        public static Datadog.Trace.TraceId Zero { get; }
        public bool Equals(Datadog.Trace.TraceId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Datadog.Trace.TraceId CreateDataDogCompatibleFromDecimalString(string id) { }
        public static Datadog.Trace.TraceId CreateFromInt(int id) { }
        public static Datadog.Trace.TraceId CreateFromString(string id) { }
        public static Datadog.Trace.TraceId CreateFromUlong(ulong id) { }
        public static Datadog.Trace.TraceId CreateRandom() { }
        public static Datadog.Trace.TraceId CreateRandomDataDogCompatible() { }
        public static bool operator !=(Datadog.Trace.TraceId traceId1, Datadog.Trace.TraceId traceId2) { }
        public static bool operator ==(Datadog.Trace.TraceId traceId1, Datadog.Trace.TraceId traceId2) { }
    }
    public class Tracer : Datadog.Trace.ITracer
    {
        [System.Obsolete("This API is deprecated. Use Tracer.Instance to obtain a Tracer instance to create" +
            " spans.")]
        public Tracer() { }
        [System.Obsolete(@"This API is deprecated, as it replaces the global settings for all Tracer instances in the application. If you were using this API to configure the global Tracer.Instance in code, use the static Tracer.Configure() to replace the global Tracer settings for the application")]
        public Tracer(Datadog.Trace.Configuration.TracerSettings settings) { }
        public Datadog.Trace.IScope ActiveScope { get; }
        public string DefaultServiceName { get; }
        public Datadog.Trace.Configuration.ImmutableTracerSettings Settings { get; }
        [set: System.Obsolete("Use Tracer.Configure to configure the global Tracer instance in code.")]
        public static Datadog.Trace.Tracer Instance { get; set; }
        protected override void Finalize() { }
        public System.Threading.Tasks.Task ForceFlushAsync() { }
        public Datadog.Trace.IScope StartActive(string operationName) { }
        public Datadog.Trace.IScope StartActive(string operationName, Datadog.Trace.SpanCreationSettings settings) { }
        public static void Configure(Datadog.Trace.Configuration.TracerSettings settings) { }
    }
}
namespace Datadog.Trace.ExtensionMethods
{
    public static class SpanExtensions
    {
        public static void AddTagsFromDbCommand(this Datadog.Trace.ISpan span, System.Data.IDbCommand command) { }
        public static void SetTraceSamplingPriority(this Datadog.Trace.ISpan span, Datadog.Trace.SamplingPriority samplingPriority) { }
    }
}