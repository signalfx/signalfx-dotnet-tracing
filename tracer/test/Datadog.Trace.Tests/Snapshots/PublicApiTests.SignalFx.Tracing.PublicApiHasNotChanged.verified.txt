[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/signalfx/signalfx-dotnet-tracing.git")]

namespace Datadog.Trace.Ci.Coverage.Attributes
{
    public class AvoidCoverageAttribute : System.Attribute
    {
        public AvoidCoverageAttribute() { }
    }
    public class CoveredAssemblyAttribute : System.Attribute
    {
        public CoveredAssemblyAttribute() { }
    }
}
namespace Datadog.Trace.Configuration
{
    public class CompositeConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource, System.Collections.Generic.IEnumerable<Datadog.Trace.Configuration.IConfigurationSource>, System.Collections.IEnumerable
    {
        public CompositeConfigurationSource() { }
        public void Add(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public bool? GetBool(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public double? GetDouble(string key) { }
        public int? GetInt32(string key) { }
        public string GetString(string key) { }
        public void Insert(int index, Datadog.Trace.Configuration.IConfigurationSource item) { }
    }
    public enum ConventionType
    {
        Default = 0,
        OpenTelemetry = 1,
        Datadog = 2,
    }
    public class EnvironmentConfigurationSource : Datadog.Trace.Configuration.StringConfigurationSource
    {
        public EnvironmentConfigurationSource() { }
        public override string GetString(string key) { }
    }
    public class ExporterSettings
    {
        public const string DefaultAgentHost = "localhost";
        public const int DefaultAgentPort = 9411;
        public ExporterSettings() { }
        public ExporterSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public System.Uri AgentUri { get; set; }
        public int DogStatsdPort { get; set; }
        public System.Uri LogsEndpointUrl { get; set; }
        public System.Uri MetricsEndpointUrl { get; set; }
        public Datadog.Trace.SignalFx.Metrics.MetricsExporterType MetricsExporter { get; set; }
        public string MetricsPipeName { get; set; }
        public bool PartialFlushEnabled { get; set; }
        public int PartialFlushMinSpans { get; set; }
        public bool SyncExport { get; set; }
        public string TracesPipeName { get; set; }
        public int TracesPipeTimeoutMs { get; set; }
    }
    public enum ExporterType
    {
        Default = 0,
        DatadogAgent = 1,
        Zipkin = 0,
    }
    public class GlobalSettings
    {
        public bool DebugEnabled { get; }
        public bool FileLogEnabled { get; }
        public bool StdoutLogEnabled { get; }
        public static Datadog.Trace.Configuration.GlobalSettings FromDefaultSources() { }
        public static void Reload() { }
        public static void SetDebugEnabled(bool enabled) { }
    }
    public interface IConfigurationSource
    {
        bool? GetBool(string key);
        System.Collections.Generic.IDictionary<string, string> GetDictionary(string key);
        System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings);
        double? GetDouble(string key);
        int? GetInt32(string key);
        string GetString(string key);
    }
    public class ImmutableExporterSettings
    {
        public ImmutableExporterSettings(Datadog.Trace.Configuration.ExporterSettings settings) { }
        public ImmutableExporterSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public System.Uri AgentUri { get; }
        public int DogStatsdPort { get; }
        public System.Uri LogsEndpointUrl { get; }
        public System.Uri MetricsEndpointUrl { get; }
        public string MetricsPipeName { get; }
        public bool PartialFlushEnabled { get; }
        public int PartialFlushMinSpans { get; }
        public bool SyncExport { get; }
        public string TracesPipeName { get; }
        public int TracesPipeTimeoutMs { get; }
    }
    public class ImmutableIntegrationSettings
    {
        public bool? AnalyticsEnabled { get; }
        public double AnalyticsSampleRate { get; }
        public bool? Enabled { get; }
        public string IntegrationName { get; }
    }
    public class ImmutableIntegrationSettingsCollection
    {
        public Datadog.Trace.Configuration.ImmutableIntegrationSettings this[string integrationName] { get; }
    }
    public class ImmutableTracerSettings
    {
        public ImmutableTracerSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public ImmutableTracerSettings(Datadog.Trace.Configuration.TracerSettings settings) { }
        [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
            "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
        public bool AnalyticsEnabled { get; }
        public Datadog.Trace.Configuration.ConventionType Convention { get; }
        public string CustomSamplingRules { get; }
        public string Environment { get; }
        public Datadog.Trace.Configuration.ExporterType Exporter { get; }
        public Datadog.Trace.Configuration.ImmutableExporterSettings ExporterSettings { get; }
        public double? GlobalSamplingRate { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> GlobalTags { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> GrpcTags { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> HeaderTags { get; }
        public Datadog.Trace.Configuration.ImmutableIntegrationSettingsCollection Integrations { get; }
        public bool KafkaCreateConsumerScopeEnabled { get; }
        public bool LogsInjectionEnabled { get; }
        public int MaxTracesSubmittedPerSecond { get; }
        public int RecordedValueMaxLength { get; }
        public string ServiceName { get; }
        public string ServiceVersion { get; }
        public bool StartupDiagnosticLogEnabled { get; }
        public bool StatsComputationEnabled { get; }
        public bool TagElasticsearchQueries { get; }
        public bool TagRedisCommands { get; }
        public bool ThreadSamplingEnabled { get; }
        public System.TimeSpan ThreadSamplingPeriod { get; }
        public bool TraceEnabled { get; }
        public bool TracerMetricsEnabled { get; }
        public string TracesTransport { get; }
        public static Datadog.Trace.Configuration.ImmutableTracerSettings FromDefaultSources() { }
    }
    public class IntegrationSettings
    {
        public IntegrationSettings(string integrationName, Datadog.Trace.Configuration.IConfigurationSource source) { }
        public bool? AnalyticsEnabled { get; set; }
        public double AnalyticsSampleRate { get; set; }
        public bool? Enabled { get; set; }
        public string IntegrationName { get; }
    }
    public class IntegrationSettingsCollection
    {
        public IntegrationSettingsCollection(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public Datadog.Trace.Configuration.IntegrationSettings this[string integrationName] { get; }
    }
    public class JsonConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource
    {
        public JsonConfigurationSource(string json) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public T GetValue<T>(string key) { }
        public override string ToString() { }
        public static Datadog.Trace.Configuration.JsonConfigurationSource FromFile(string filename) { }
    }
    public class NameValueConfigurationSource : Datadog.Trace.Configuration.StringConfigurationSource
    {
        public NameValueConfigurationSource(System.Collections.Specialized.NameValueCollection nameValueCollection) { }
        public override string GetString(string key) { }
    }
    public abstract class StringConfigurationSource : Datadog.Trace.Configuration.IConfigurationSource
    {
        protected StringConfigurationSource() { }
        public virtual bool? GetBool(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) { }
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key, bool allowOptionalMappings) { }
        public double? GetDouble(string key) { }
        public virtual int? GetInt32(string key) { }
        public abstract string GetString(string key);
        public static System.Collections.Generic.IDictionary<string, string> ParseCustomKeyValues(string data) { }
        public static System.Collections.Generic.IDictionary<string, string> ParseCustomKeyValues(string data, bool allowOptionalMappings) { }
    }
    public class TracerSettings
    {
        public TracerSettings() { }
        public TracerSettings(Datadog.Trace.Configuration.IConfigurationSource source) { }
        public TracerSettings(bool useDefaultSources) { }
        [System.Obsolete("App Analytics has been replaced by Tracing without Limits. For more information s" +
            "ee https://docs.datadoghq.com/tracing/legacy_app_analytics/")]
        public bool AnalyticsEnabled { get; set; }
        public Datadog.Trace.Configuration.ConventionType Convention { get; set; }
        public string CustomSamplingRules { get; set; }
        public bool DiagnosticSourceEnabled { get; set; }
        public System.Collections.Generic.HashSet<string> DisabledIntegrationNames { get; set; }
        public string Environment { get; set; }
        public Datadog.Trace.Configuration.ExporterType Exporter { get; set; }
        public Datadog.Trace.Configuration.ExporterSettings ExporterSettings { get; set; }
        public double? GlobalSamplingRate { get; set; }
        public System.Collections.Generic.IDictionary<string, string> GlobalTags { get; set; }
        public System.Collections.Generic.IDictionary<string, string> GrpcTags { get; set; }
        public System.Collections.Generic.IDictionary<string, string> HeaderTags { get; set; }
        public Datadog.Trace.Configuration.IntegrationSettingsCollection Integrations { get; }
        public bool KafkaCreateConsumerScopeEnabled { get; set; }
        public bool LogsInjectionEnabled { get; set; }
        public int MaxTracesSubmittedPerSecond { get; set; }
        public int RecordedValueMaxLength { get; set; }
        public bool RuntimeMetricsEnabled { get; set; }
        public string ServiceName { get; set; }
        public string ServiceVersion { get; set; }
        public string SignalFxAccessToken { get; set; }
        public bool StartupDiagnosticLogEnabled { get; set; }
        public bool StatsComputationEnabled { get; set; }
        public bool TagElasticsearchQueries { get; set; }
        public bool TagMongoCommands { get; set; }
        public bool TagRedisCommands { get; set; }
        public bool TraceEnabled { get; set; }
        public bool TraceResponseHeaderEnabled { get; set; }
        public bool TracerMetricsEnabled { get; set; }
        public string TracesTransport { get; set; }
        public Datadog.Trace.Configuration.ImmutableTracerSettings Build() { }
        public void SetHttpClientErrorStatusCodes(System.Collections.Generic.IEnumerable<int> statusCodes) { }
        public void SetHttpServerErrorStatusCodes(System.Collections.Generic.IEnumerable<int> statusCodes) { }
        public void SetServiceNameMappings(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> mappings) { }
        public static Datadog.Trace.Configuration.CompositeConfigurationSource CreateDefaultConfigurationSource() { }
        public static Datadog.Trace.Configuration.TracerSettings FromDefaultSources() { }
    }
}
namespace Datadog.Trace.Configuration.Types
{
    public static class PropagatorTypes
    {
        public const string B3 = "B3";
        public const string W3C = "W3C";
    }
}
namespace Datadog.Trace.Conventions
{
    public interface ITraceIdConvention
    {
        Datadog.Trace.TraceId CreateFromString(string id);
        Datadog.Trace.TraceId GenerateNewTraceId();
    }
}
namespace Datadog.Trace
{
    public static class CorrelationIdentifier
    {
        public static string Env { get; }
        public static string Service { get; }
        public static ulong SpanId { get; }
        public static Datadog.Trace.TraceId TraceId { get; }
        public static string Version { get; }
    }
    public interface IScope : System.IDisposable
    {
        Datadog.Trace.ISpan Span { get; }
        void Close();
    }
    public interface ISpan : System.IDisposable
    {
        Datadog.Trace.ISpanContext Context { get; }
        bool Error { get; set; }
        string LogicScope { get; set; }
        string OperationName { get; set; }
        string ResourceName { get; set; }
        string ServiceName { get; set; }
        ulong SpanId { get; }
        Datadog.Trace.SpanStatus Status { get; set; }
        Datadog.Trace.TraceId TraceId { get; }
        string Type { get; set; }
        void Finish();
        void Finish(System.DateTimeOffset finishTimestamp);
        string GetTag(string key);
        void SetException(System.Exception exception);
        Datadog.Trace.ISpan SetTag(string key, string value);
    }
    public interface ISpanContext
    {
        string ServiceName { get; }
        ulong SpanId { get; }
        Datadog.Trace.TraceId TraceId { get; }
    }
    public interface ISpanContextExtractor
    {
        Datadog.Trace.ISpanContext? Extract<TCarrier>(TCarrier carrier, System.Func<TCarrier, string, System.Collections.Generic.IEnumerable<string?>> getter);
    }
    public interface ITracer
    {
        Datadog.Trace.IScope ActiveScope { get; }
        Datadog.Trace.Configuration.ImmutableTracerSettings Settings { get; }
        Datadog.Trace.IScope StartActive(string operationName);
        Datadog.Trace.IScope StartActive(string operationName, Datadog.Trace.SpanCreationSettings settings);
    }
    public enum SamplingPriority
    {
        UserReject = -1,
        AutoReject = 0,
        AutoKeep = 1,
        UserKeep = 2,
    }
    public static class ServerTimingHeader
    {
        public const string Key = "Server-Timing";
        public static void SetHeaders<T>(Datadog.Trace.SpanContext context, T carrier, System.Action<T, string, string> setter) { }
    }
    public class SpanContext : Datadog.Trace.ISpanContext, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string, string>>, System.Collections.Generic.IReadOnlyDictionary<string, string>, System.Collections.IEnumerable
    {
        public static readonly Datadog.Trace.ISpanContext None;
        public SpanContext(Datadog.Trace.TraceId? traceId, ulong spanId, string traceState) { }
        public SpanContext(Datadog.Trace.TraceId? traceId, ulong spanId, Datadog.Trace.SamplingPriority? samplingPriority = default, string serviceName = null) { }
        public Datadog.Trace.ISpanContext Parent { get; }
        public ulong? ParentId { get; }
        public string ServiceName { get; set; }
        public ulong SpanId { get; }
        public Datadog.Trace.TraceId TraceId { get; }
    }
    public class SpanContextExtractor : Datadog.Trace.ISpanContextExtractor
    {
        public SpanContextExtractor() { }
        public Datadog.Trace.ISpanContext? Extract<TCarrier>(TCarrier carrier, System.Func<TCarrier, string, System.Collections.Generic.IEnumerable<string?>> getter) { }
    }
    public struct SpanCreationSettings
    {
        public bool? FinishOnClose { get; set; }
        public Datadog.Trace.ISpanContext Parent { get; set; }
        public System.DateTimeOffset? StartTime { get; set; }
    }
    public static class SpanExtensions
    {
        public static void SetUser(this Datadog.Trace.ISpan span, Datadog.Trace.UserDetails userDetails) { }
    }
    public static class SpanKinds
    {
        public const string Client = "client";
        public const string Consumer = "consumer";
        public const string Producer = "producer";
        public const string Server = "server";
    }
    public readonly struct SpanStatus : System.IEquatable<Datadog.Trace.SpanStatus>
    {
        public static readonly Datadog.Trace.SpanStatus Error;
        public static readonly Datadog.Trace.SpanStatus Ok;
        public static readonly Datadog.Trace.SpanStatus Unset;
        public Datadog.Trace.StatusCode StatusCode { get; }
        public bool Equals(Datadog.Trace.SpanStatus other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(Datadog.Trace.SpanStatus status1, Datadog.Trace.SpanStatus status2) { }
        public static bool operator ==(Datadog.Trace.SpanStatus status1, Datadog.Trace.SpanStatus status2) { }
    }
    public static class SpanTypes
    {
        public const string Benchmark = "benchmark";
        public const string Build = "build";
        public const string Custom = "custom";
        public const string Db = "db";
        public const string Http = "http";
        public const string Queue = "queue";
        public const string Serverless = "serverless";
        public const string Sql = "sql";
        public const string Test = "test";
        public const string Topic = "topic";
        public const string Web = "web";
    }
    public enum StatusCode
    {
        Unset = 0,
        Ok = 1,
        Error = 2,
    }
    public static class Tags
    {
        public const string DbName = "db.name";
        public const string DbOperation = "db.operation";
        public const string DbStatement = "db.statement";
        public const string DbType = "db.system";
        public const string DbUser = "db.user";
        public const string Env = "deployment.environment";
        public const string Error = "error";
        public const string ErrorMsg = "sfx.error.message";
        public const string ErrorStack = "sfx.error.stack";
        public const string ErrorType = "sfx.error.kind";
        public const string HttpMethod = "http.method";
        public const string HttpRequestHeadersHost = "http.host";
        public const string HttpStatusCode = "http.status_code";
        public const string HttpUrl = "http.url";
        public const string InstrumentationName = "component";
        public const string InstrumentedMethod = "instrumented.method";
        public const string Language = "language";
        public const string ManualDrop = "manual.drop";
        public const string ManualKeep = "manual.keep";
        public const string MessageSize = "message.size";
        public const string OutHost = "net.peer.name";
        public const string OutPort = "net.peer.port";
        public const string SamplingPriority = "sampling.priority";
        public const string SignalFxLibrary = "signalfx.tracing.library";
        public const string SignalFxVersion = "signalfx.tracing.version";
        public const string SpanKind = "span.kind";
        public const string SqlQuery = "sql.query";
        public const string SqlRows = "sql.rows";
        public const string Version = "version";
        public static class Messaging
        {
            public const string ConsumerId = "messaging.consumer_id\t";
            public const string ConversationId = "messaging.conversation_id";
            public const string Destination = "messaging.destination";
            public const string DestinationKind = "messaging.destination_kind";
            public const string MessageId = "messaging.message_id";
            public const string MessageSize = "messaging.message_payload_size_bytes";
            public const string MessageSizeCompressed = "messaging.message_payload_compressed_size_bytes";
            public const string Operation = "messaging.operation";
            public const string Protocol = "messaging.protocol";
            public const string ProtocolVersion = "messaging.protocol_version";
            public const string System = "messaging.system";
            public const string TempDestination = "messaging.temp_destination";
            public const string Url = "messaging.url";
        }
        public static class Net
        {
            public const string PeerIP = "net.peer.ip";
            public const string PeerName = "net.peer.name";
            public const string PeerPort = "net.peer.port";
        }
        public static class RabbitMq
        {
            public const string RoutingKey = "messaging.rabbitmq.routing_key";
        }
    }
    public readonly struct TraceId : System.IEquatable<Datadog.Trace.TraceId>
    {
        public ulong Higher { get; }
        public ulong Lower { get; }
        public static Datadog.Trace.TraceId Zero { get; }
        public bool Equals(Datadog.Trace.TraceId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Datadog.Trace.TraceId CreateDataDogCompatibleFromDecimalString(string id) { }
        public static Datadog.Trace.TraceId CreateFromInt(int id) { }
        public static Datadog.Trace.TraceId CreateFromString(string id) { }
        public static Datadog.Trace.TraceId CreateFromUlong(ulong id) { }
        public static Datadog.Trace.TraceId CreateRandom() { }
        public static Datadog.Trace.TraceId CreateRandomDataDogCompatible() { }
        public static bool operator !=(Datadog.Trace.TraceId traceId1, Datadog.Trace.TraceId traceId2) { }
        public static bool operator ==(Datadog.Trace.TraceId traceId1, Datadog.Trace.TraceId traceId2) { }
    }
    public class Tracer : Datadog.Trace.ITracer
    {
        public Datadog.Trace.IScope ActiveScope { get; }
        public string DefaultServiceName { get; }
        public Datadog.Trace.Configuration.ImmutableTracerSettings Settings { get; }
        [set: System.Obsolete("Use Tracer.Configure to configure the global Tracer instance in code.")]
        public static Datadog.Trace.Tracer Instance { get; set; }
        protected override void Finalize() { }
        public System.Threading.Tasks.Task ForceFlushAsync() { }
        public Datadog.Trace.IScope StartActive(string operationName) { }
        public Datadog.Trace.IScope StartActive(string operationName, Datadog.Trace.SpanCreationSettings settings) { }
        public static void Configure(Datadog.Trace.Configuration.TracerSettings settings) { }
    }
    public struct UserDetails
    {
        public UserDetails(string id) { }
        public string? Email { get; set; }
        public string Id { get; set; }
        public string? Name { get; set; }
        public bool PropagateId { get; set; }
        public string? Role { get; set; }
        public string? Scope { get; set; }
        public string? SessionId { get; set; }
    }
}
namespace Datadog.Trace.ExtensionMethods
{
    public static class SpanExtensions
    {
        public static void AddTagsFromDbCommand(this Datadog.Trace.ISpan span, System.Data.IDbCommand command) { }
        public static void SetTraceSamplingPriority(this Datadog.Trace.ISpan span, Datadog.Trace.SamplingPriority samplingPriority) { }
    }
}
namespace Datadog.Trace.Propagation
{
    public static class B3HttpHeaderNames
    {
        public const string B3Flags = "x-b3-flags";
        public const string B3ParentId = "x-b3-parentspanid";
        public const string B3Sampled = "x-b3-sampled";
        public const string B3SpanId = "x-b3-spanid";
        public const string B3TraceId = "x-b3-traceid";
    }
    public class CommonHttpHeaderNames
    {
        public const string TracingEnabled = "x-datadog-tracing-enabled";
        public const string UserAgent = "User-Agent";
        public CommonHttpHeaderNames() { }
    }
    public static class DDHttpHeaderNames
    {
        [System.Obsolete]
        public const string DatadogTags = "x-datadog-tags";
        public const string Origin = "x-datadog-origin";
        public const string ParentId = "x-datadog-parent-id";
        public const string SamplingPriority = "x-datadog-sampling-priority";
        public const string TraceId = "x-datadog-trace-id";
        public const string TracingEnabled = "x-datadog-tracing-enabled";
        public const string UserAgent = "User-Agent";
    }
}
namespace Datadog.Trace.SignalFx.Metrics
{
    public enum MetricsExporterType
    {
        Default = 0,
        StatsD = 1,
        SignalFx = 0,
    }
}
namespace Datadog.Trace.Vendors.ProtoBuf
{
    public readonly struct DiscriminatedUnion128
    {
        public readonly bool Boolean;
        public readonly System.DateTime DateTime;
        public readonly double Double;
        public readonly System.Guid Guid;
        public readonly int Int32;
        public readonly long Int64;
        public readonly float Single;
        public readonly System.TimeSpan TimeSpan;
        public readonly uint UInt32;
        public readonly ulong UInt64;
        public DiscriminatedUnion128(int discriminator, bool value) { }
        public DiscriminatedUnion128(int discriminator, System.DateTime? value) { }
        public DiscriminatedUnion128(int discriminator, double value) { }
        public DiscriminatedUnion128(int discriminator, System.Guid? value) { }
        public DiscriminatedUnion128(int discriminator, int value) { }
        public DiscriminatedUnion128(int discriminator, long value) { }
        public DiscriminatedUnion128(int discriminator, float value) { }
        public DiscriminatedUnion128(int discriminator, System.TimeSpan? value) { }
        public DiscriminatedUnion128(int discriminator, uint value) { }
        public DiscriminatedUnion128(int discriminator, ulong value) { }
        public int Discriminator { get; }
        public bool Is(int discriminator) { }
        public static void Reset(ref Datadog.Trace.Vendors.ProtoBuf.DiscriminatedUnion128 value, int discriminator) { }
    }
    public readonly struct DiscriminatedUnion128Object
    {
        public readonly bool Boolean;
        public readonly System.DateTime DateTime;
        public readonly double Double;
        public readonly System.Guid Guid;
        public readonly int Int32;
        public readonly long Int64;
        public readonly object Object;
        public readonly float Single;
        public readonly System.TimeSpan TimeSpan;
        public readonly uint UInt32;
        public readonly ulong UInt64;
        public DiscriminatedUnion128Object(int discriminator, bool value) { }
        public DiscriminatedUnion128Object(int discriminator, System.DateTime? value) { }
        public DiscriminatedUnion128Object(int discriminator, double value) { }
        public DiscriminatedUnion128Object(int discriminator, System.Guid? value) { }
        public DiscriminatedUnion128Object(int discriminator, int value) { }
        public DiscriminatedUnion128Object(int discriminator, long value) { }
        public DiscriminatedUnion128Object(int discriminator, object value) { }
        public DiscriminatedUnion128Object(int discriminator, float value) { }
        public DiscriminatedUnion128Object(int discriminator, System.TimeSpan? value) { }
        public DiscriminatedUnion128Object(int discriminator, uint value) { }
        public DiscriminatedUnion128Object(int discriminator, ulong value) { }
        public int Discriminator { get; }
        public bool Is(int discriminator) { }
        public static void Reset(ref Datadog.Trace.Vendors.ProtoBuf.DiscriminatedUnion128Object value, int discriminator) { }
    }
    public readonly struct DiscriminatedUnion32
    {
        public readonly bool Boolean;
        public readonly int Int32;
        public readonly float Single;
        public readonly uint UInt32;
        public DiscriminatedUnion32(int discriminator, bool value) { }
        public DiscriminatedUnion32(int discriminator, int value) { }
        public DiscriminatedUnion32(int discriminator, float value) { }
        public DiscriminatedUnion32(int discriminator, uint value) { }
        public int Discriminator { get; }
        public bool Is(int discriminator) { }
        public static void Reset(ref Datadog.Trace.Vendors.ProtoBuf.DiscriminatedUnion32 value, int discriminator) { }
    }
    public readonly struct DiscriminatedUnion32Object
    {
        public readonly bool Boolean;
        public readonly int Int32;
        public readonly object Object;
        public readonly float Single;
        public readonly uint UInt32;
        public DiscriminatedUnion32Object(int discriminator, bool value) { }
        public DiscriminatedUnion32Object(int discriminator, int value) { }
        public DiscriminatedUnion32Object(int discriminator, object value) { }
        public DiscriminatedUnion32Object(int discriminator, float value) { }
        public DiscriminatedUnion32Object(int discriminator, uint value) { }
        public int Discriminator { get; }
        public bool Is(int discriminator) { }
        public static void Reset(ref Datadog.Trace.Vendors.ProtoBuf.DiscriminatedUnion32Object value, int discriminator) { }
    }
    public readonly struct DiscriminatedUnion64
    {
        public readonly bool Boolean;
        public readonly System.DateTime DateTime;
        public readonly double Double;
        public readonly int Int32;
        public readonly long Int64;
        public readonly float Single;
        public readonly System.TimeSpan TimeSpan;
        public readonly uint UInt32;
        public readonly ulong UInt64;
        public DiscriminatedUnion64(int discriminator, bool value) { }
        public DiscriminatedUnion64(int discriminator, System.DateTime? value) { }
        public DiscriminatedUnion64(int discriminator, double value) { }
        public DiscriminatedUnion64(int discriminator, int value) { }
        public DiscriminatedUnion64(int discriminator, long value) { }
        public DiscriminatedUnion64(int discriminator, float value) { }
        public DiscriminatedUnion64(int discriminator, System.TimeSpan? value) { }
        public DiscriminatedUnion64(int discriminator, uint value) { }
        public DiscriminatedUnion64(int discriminator, ulong value) { }
        public int Discriminator { get; }
        public bool Is(int discriminator) { }
        public static void Reset(ref Datadog.Trace.Vendors.ProtoBuf.DiscriminatedUnion64 value, int discriminator) { }
    }
    public readonly struct DiscriminatedUnion64Object
    {
        public readonly bool Boolean;
        public readonly System.DateTime DateTime;
        public readonly double Double;
        public readonly int Int32;
        public readonly long Int64;
        public readonly object Object;
        public readonly float Single;
        public readonly System.TimeSpan TimeSpan;
        public readonly uint UInt32;
        public readonly ulong UInt64;
        public DiscriminatedUnion64Object(int discriminator, bool value) { }
        public DiscriminatedUnion64Object(int discriminator, System.DateTime? value) { }
        public DiscriminatedUnion64Object(int discriminator, double value) { }
        public DiscriminatedUnion64Object(int discriminator, int value) { }
        public DiscriminatedUnion64Object(int discriminator, long value) { }
        public DiscriminatedUnion64Object(int discriminator, object value) { }
        public DiscriminatedUnion64Object(int discriminator, float value) { }
        public DiscriminatedUnion64Object(int discriminator, System.TimeSpan? value) { }
        public DiscriminatedUnion64Object(int discriminator, uint value) { }
        public DiscriminatedUnion64Object(int discriminator, ulong value) { }
        public int Discriminator { get; }
        public bool Is(int discriminator) { }
        public static void Reset(ref Datadog.Trace.Vendors.ProtoBuf.DiscriminatedUnion64Object value, int discriminator) { }
    }
    public readonly struct DiscriminatedUnionObject
    {
        public readonly object Object;
        public DiscriminatedUnionObject(int discriminator, object value) { }
        public int Discriminator { get; }
        public bool Is(int discriminator) { }
        public static void Reset(ref Datadog.Trace.Vendors.ProtoBuf.DiscriminatedUnionObject value, int discriminator) { }
    }
}
namespace Datadog.Tracer.OpenTelemetry.Proto.Common.V1
{
    public class AnyValue
    {
        public AnyValue() { }
        public Datadog.Tracer.OpenTelemetry.Proto.Common.V1.ArrayValue ArrayValue { get; set; }
        public bool BoolValue { get; set; }
        public byte[] BytesValue { get; set; }
        public double DoubleValue { get; set; }
        public long IntValue { get; set; }
        public Datadog.Tracer.OpenTelemetry.Proto.Common.V1.KeyValueList KvlistValue { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string StringValue { get; set; }
        public void ResetArrayValue() { }
        public void ResetBoolValue() { }
        public void ResetBytesValue() { }
        public void ResetDoubleValue() { }
        public void ResetIntValue() { }
        public void ResetKvlistValue() { }
        public void ResetStringValue() { }
        public bool ShouldSerializeArrayValue() { }
        public bool ShouldSerializeBoolValue() { }
        public bool ShouldSerializeBytesValue() { }
        public bool ShouldSerializeDoubleValue() { }
        public bool ShouldSerializeIntValue() { }
        public bool ShouldSerializeKvlistValue() { }
        public bool ShouldSerializeStringValue() { }
    }
    public class ArrayValue
    {
        public ArrayValue() { }
        public System.Collections.Generic.List<Datadog.Tracer.OpenTelemetry.Proto.Common.V1.AnyValue> Values { get; }
    }
    public class InstrumentationLibrary
    {
        public InstrumentationLibrary() { }
        [System.ComponentModel.DefaultValue("")]
        public string Name { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string Version { get; set; }
    }
    public class KeyValue
    {
        public KeyValue() { }
        [System.ComponentModel.DefaultValue("")]
        public string Key { get; set; }
        public Datadog.Tracer.OpenTelemetry.Proto.Common.V1.AnyValue Value { get; set; }
    }
    public class KeyValueList
    {
        public KeyValueList() { }
        public System.Collections.Generic.List<Datadog.Tracer.OpenTelemetry.Proto.Common.V1.KeyValue> Values { get; }
    }
    [System.Obsolete]
    public class StringKeyValue
    {
        public StringKeyValue() { }
        [System.ComponentModel.DefaultValue("")]
        public string Key { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string Value { get; set; }
    }
}
namespace Datadog.Tracer.OpenTelemetry.Proto.Logs.V1
{
    public class InstrumentationLibraryLogs
    {
        public InstrumentationLibraryLogs() { }
        public Datadog.Tracer.OpenTelemetry.Proto.Common.V1.InstrumentationLibrary InstrumentationLibrary { get; set; }
        public System.Collections.Generic.List<Datadog.Tracer.OpenTelemetry.Proto.Logs.V1.LogRecord> Logs { get; }
        [System.ComponentModel.DefaultValue("")]
        public string SchemaUrl { get; set; }
    }
    public class LogRecord
    {
        public LogRecord() { }
        public System.Collections.Generic.List<Datadog.Tracer.OpenTelemetry.Proto.Common.V1.KeyValue> Attributes { get; }
        public Datadog.Tracer.OpenTelemetry.Proto.Common.V1.AnyValue Body { get; set; }
        public uint DroppedAttributesCount { get; set; }
        public uint Flags { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string Name { get; set; }
        public Datadog.Tracer.OpenTelemetry.Proto.Logs.V1.SeverityNumber SeverityNumber { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string SeverityText { get; set; }
        public byte[] SpanId { get; set; }
        public ulong TimeUnixNano { get; set; }
        public byte[] TraceId { get; set; }
    }
    public enum LogRecordFlags
    {
        LogRecordFlagUnspecified = 0,
        LogRecordFlagTraceFlagsMask = 255,
    }
    public class LogsData
    {
        public LogsData() { }
        public System.Collections.Generic.List<Datadog.Tracer.OpenTelemetry.Proto.Logs.V1.ResourceLogs> ResourceLogs { get; }
    }
    public class ResourceLogs
    {
        public ResourceLogs() { }
        public System.Collections.Generic.List<Datadog.Tracer.OpenTelemetry.Proto.Logs.V1.InstrumentationLibraryLogs> InstrumentationLibraryLogs { get; }
        public Datadog.Tracer.OpenTelemetry.Proto.Resource.V1.Resource Resource { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string SchemaUrl { get; set; }
    }
    public enum SeverityNumber
    {
        SeverityNumberUnspecified = 0,
        SeverityNumberTrace = 1,
        SeverityNumberTrace2 = 2,
        SeverityNumberTrace3 = 3,
        SeverityNumberTrace4 = 4,
        SeverityNumberDebug = 5,
        SeverityNumberDebug2 = 6,
        SeverityNumberDebug3 = 7,
        SeverityNumberDebug4 = 8,
        SeverityNumberInfo = 9,
        SeverityNumberInfo2 = 10,
        SeverityNumberInfo3 = 11,
        SeverityNumberInfo4 = 12,
        SeverityNumberWarn = 13,
        SeverityNumberWarn2 = 14,
        SeverityNumberWarn3 = 15,
        SeverityNumberWarn4 = 16,
        SeverityNumberError = 17,
        SeverityNumberError2 = 18,
        SeverityNumberError3 = 19,
        SeverityNumberError4 = 20,
        SeverityNumberFatal = 21,
        SeverityNumberFatal2 = 22,
        SeverityNumberFatal3 = 23,
        SeverityNumberFatal4 = 24,
    }
}
namespace Datadog.Tracer.OpenTelemetry.Proto.Resource.V1
{
    public class Resource
    {
        public Resource() { }
        public System.Collections.Generic.List<Datadog.Tracer.OpenTelemetry.Proto.Common.V1.KeyValue> Attributes { get; }
        public uint DroppedAttributesCount { get; set; }
    }
}
namespace Datadog.Tracer.SignalFx.Metrics.Protobuf
{
    public class DataPoint
    {
        public DataPoint() { }
        public System.Collections.Generic.List<Datadog.Tracer.SignalFx.Metrics.Protobuf.Dimension> dimensions { get; }
        [System.ComponentModel.DefaultValue("")]
        public string metric { get; set; }
        public Datadog.Tracer.SignalFx.Metrics.Protobuf.MetricType metricType { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string source { get; set; }
        public long timestamp { get; set; }
        public Datadog.Tracer.SignalFx.Metrics.Protobuf.Datum value { get; set; }
        public void Resetmetric() { }
        public void ResetmetricType() { }
        public void Resetsource() { }
        public void Resettimestamp() { }
        public bool ShouldSerializemetric() { }
        public bool ShouldSerializemetricType() { }
        public bool ShouldSerializesource() { }
        public bool ShouldSerializetimestamp() { }
    }
    public class DataPointUploadMessage
    {
        public DataPointUploadMessage() { }
        public System.Collections.Generic.List<Datadog.Tracer.SignalFx.Metrics.Protobuf.DataPoint> datapoints { get; }
    }
    public class Datum
    {
        public Datum() { }
        public double doubleValue { get; set; }
        public long intValue { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string strValue { get; set; }
        public void ResetdoubleValue() { }
        public void ResetintValue() { }
        public void ResetstrValue() { }
        public bool ShouldSerializedoubleValue() { }
        public bool ShouldSerializeintValue() { }
        public bool ShouldSerializestrValue() { }
    }
    public class Dimension
    {
        public Dimension() { }
        [System.ComponentModel.DefaultValue("")]
        public string key { get; set; }
        [System.ComponentModel.DefaultValue("")]
        public string value { get; set; }
        public void Resetkey() { }
        public void Resetvalue() { }
        public bool ShouldSerializekey() { }
        public bool ShouldSerializevalue() { }
    }
    public enum MetricType
    {
        GAUGE = 0,
        COUNTER = 1,
        ENUM = 2,
        CUMULATIVE_COUNTER = 3,
    }
    public class PointValue
    {
        public PointValue() { }
        public long timestamp { get; set; }
        public Datadog.Tracer.SignalFx.Metrics.Protobuf.Datum value { get; set; }
        public void Resettimestamp() { }
        public bool ShouldSerializetimestamp() { }
    }
}