// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class MessagingTags
    {
        private static readonly byte[] SystemBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.system");
        private static readonly byte[] DestinationBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.destination");
        private static readonly byte[] DestinationKindBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.destination_kind");
        private static readonly byte[] TempDestinationBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.temp_destination");
        private static readonly byte[] ProtocolBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.protocol");
        private static readonly byte[] ProtocolVersionBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.protocol_version");
        private static readonly byte[] UrlBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.url");
        private static readonly byte[] OperationBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.operation");
        private static readonly byte[] MessageIdBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.message_id");
        private static readonly byte[] ConversationIdBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.conversation_id");
        private static readonly byte[] ConsumerIdBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.consumer_id	");
        private static readonly byte[] MessageSizeBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.message_payload_size_bytes");
        private static readonly byte[] MessageSizeCompressedBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("messaging.message_payload_compressed_size_bytes");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "messaging.system" => System,
                "messaging.destination" => Destination,
                "messaging.destination_kind" => DestinationKind,
                "messaging.temp_destination" => TempDestination,
                "messaging.protocol" => Protocol,
                "messaging.protocol_version" => ProtocolVersion,
                "messaging.url" => Url,
                "messaging.operation" => Operation,
                "messaging.message_id" => MessageId,
                "messaging.conversation_id" => ConversationId,
                "messaging.consumer_id	" => ConsumerId,
                "messaging.message_payload_size_bytes" => MessageSize,
                "messaging.message_payload_compressed_size_bytes" => MessageSizeCompressed,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "messaging.system": 
                    System = value;
                    break;
                case "messaging.destination": 
                    Destination = value;
                    break;
                case "messaging.destination_kind": 
                    DestinationKind = value;
                    break;
                case "messaging.temp_destination": 
                    TempDestination = value;
                    break;
                case "messaging.protocol": 
                    Protocol = value;
                    break;
                case "messaging.protocol_version": 
                    ProtocolVersion = value;
                    break;
                case "messaging.url": 
                    Url = value;
                    break;
                case "messaging.operation": 
                    Operation = value;
                    break;
                case "messaging.message_id": 
                    MessageId = value;
                    break;
                case "messaging.conversation_id": 
                    ConversationId = value;
                    break;
                case "messaging.consumer_id	": 
                    ConsumerId = value;
                    break;
                case "messaging.message_payload_size_bytes": 
                    MessageSize = value;
                    break;
                case "messaging.message_payload_compressed_size_bytes": 
                    MessageSizeCompressed = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected static Datadog.Trace.Tagging.IProperty<string?>[] MessagingTagsProperties => 
             Datadog.Trace.ExtensionMethods.ArrayExtensions.Concat(InstrumentationTagsProperties,
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.system", t => t.System),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.destination", t => t.Destination),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.destination_kind", t => t.DestinationKind),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.temp_destination", t => t.TempDestination),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.protocol", t => t.Protocol),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.protocol_version", t => t.ProtocolVersion),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.url", t => t.Url),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.operation", t => t.Operation),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.message_id", t => t.MessageId),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.conversation_id", t => t.ConversationId),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.consumer_id	", t => t.ConsumerId),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.message_payload_size_bytes", t => t.MessageSize),
                new Datadog.Trace.Tagging.Property<MessagingTags, string?>("messaging.message_payload_compressed_size_bytes", t => t.MessageSizeCompressed)
);

        protected override Datadog.Trace.Tagging.IProperty<string?>[] GetAdditionalTags()
        {
             return MessagingTagsProperties;
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (System != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SystemBytes, System);
            }

            if (Destination != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DestinationBytes, Destination);
            }

            if (DestinationKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DestinationKindBytes, DestinationKind);
            }

            if (TempDestination != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, TempDestinationBytes, TempDestination);
            }

            if (Protocol != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ProtocolBytes, Protocol);
            }

            if (ProtocolVersion != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ProtocolVersionBytes, ProtocolVersion);
            }

            if (Url != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, UrlBytes, Url);
            }

            if (Operation != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, OperationBytes, Operation);
            }

            if (MessageId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MessageIdBytes, MessageId);
            }

            if (ConversationId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ConversationIdBytes, ConversationId);
            }

            if (ConsumerId != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ConsumerIdBytes, ConsumerId);
            }

            if (MessageSize != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MessageSizeBytes, MessageSize);
            }

            if (MessageSizeCompressed != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MessageSizeCompressedBytes, MessageSizeCompressed);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (System != null)
            {
                sb.Append("messaging.system (tag):")
                  .Append(System)
                  .Append(',');
            }

            if (Destination != null)
            {
                sb.Append("messaging.destination (tag):")
                  .Append(Destination)
                  .Append(',');
            }

            if (DestinationKind != null)
            {
                sb.Append("messaging.destination_kind (tag):")
                  .Append(DestinationKind)
                  .Append(',');
            }

            if (TempDestination != null)
            {
                sb.Append("messaging.temp_destination (tag):")
                  .Append(TempDestination)
                  .Append(',');
            }

            if (Protocol != null)
            {
                sb.Append("messaging.protocol (tag):")
                  .Append(Protocol)
                  .Append(',');
            }

            if (ProtocolVersion != null)
            {
                sb.Append("messaging.protocol_version (tag):")
                  .Append(ProtocolVersion)
                  .Append(',');
            }

            if (Url != null)
            {
                sb.Append("messaging.url (tag):")
                  .Append(Url)
                  .Append(',');
            }

            if (Operation != null)
            {
                sb.Append("messaging.operation (tag):")
                  .Append(Operation)
                  .Append(',');
            }

            if (MessageId != null)
            {
                sb.Append("messaging.message_id (tag):")
                  .Append(MessageId)
                  .Append(',');
            }

            if (ConversationId != null)
            {
                sb.Append("messaging.conversation_id (tag):")
                  .Append(ConversationId)
                  .Append(',');
            }

            if (ConsumerId != null)
            {
                sb.Append("messaging.consumer_id	 (tag):")
                  .Append(ConsumerId)
                  .Append(',');
            }

            if (MessageSize != null)
            {
                sb.Append("messaging.message_payload_size_bytes (tag):")
                  .Append(MessageSize)
                  .Append(',');
            }

            if (MessageSizeCompressed != null)
            {
                sb.Append("messaging.message_payload_compressed_size_bytes (tag):")
                  .Append(MessageSizeCompressed)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
