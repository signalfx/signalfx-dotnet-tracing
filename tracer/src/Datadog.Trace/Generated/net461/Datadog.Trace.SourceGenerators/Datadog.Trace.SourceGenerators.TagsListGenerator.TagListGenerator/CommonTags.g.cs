// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;

namespace Datadog.Trace.Tagging
{
    partial class CommonTags
    {
        private static readonly byte[] SamplingPriorityBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("_sampling_priority_v1");
        private static readonly byte[] SamplingLimitDecisionBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("_dd.limit_psr");
        private static readonly byte[] TracesKeepRateBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("_dd.tracer_kr");
        private static readonly byte[] EnvironmentBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("deployment.environment");
        private static readonly byte[] VersionBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("version");
        private static readonly byte[] SignalFxVersionBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("signalfx.tracing.version");
        private static readonly byte[] SignalFxLibraryBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("signalfx.tracing.library");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "deployment.environment" => Environment,
                "version" => Version,
                "signalfx.tracing.version" => SignalFxVersion,
                "signalfx.tracing.library" => SignalFxLibrary,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "deployment.environment": 
                    Environment = value;
                    break;
                case "version": 
                    Version = value;
                    break;
                case "signalfx.tracing.version": 
                    SignalFxVersion = value;
                    break;
                case "signalfx.tracing.library": 
                    SignalFxLibrary = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected static Datadog.Trace.Tagging.IProperty<string?>[] CommonTagsProperties => 
             Datadog.Trace.ExtensionMethods.ArrayExtensions.Concat(TagsListProperties,
                new Datadog.Trace.Tagging.Property<CommonTags, string?>("deployment.environment", t => t.Environment),
                new Datadog.Trace.Tagging.Property<CommonTags, string?>("version", t => t.Version),
                new Datadog.Trace.Tagging.Property<CommonTags, string?>("signalfx.tracing.version", t => t.SignalFxVersion),
                new Datadog.Trace.Tagging.Property<CommonTags, string?>("signalfx.tracing.library", t => t.SignalFxLibrary)
);

        protected override Datadog.Trace.Tagging.IProperty<string?>[] GetAdditionalTags()
        {
             return CommonTagsProperties;
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (Environment != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, EnvironmentBytes, Environment, tagProcessors);
            }

            if (Version != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, VersionBytes, Version, tagProcessors);
            }

            if (SignalFxVersion != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SignalFxVersionBytes, SignalFxVersion, tagProcessors);
            }

            if (SignalFxLibrary != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SignalFxLibraryBytes, SignalFxLibrary, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Environment != null)
            {
                sb.Append("deployment.environment (tag):")
                  .Append(Environment)
                  .Append(',');
            }

            if (Version != null)
            {
                sb.Append("version (tag):")
                  .Append(Version)
                  .Append(',');
            }

            if (SignalFxVersion != null)
            {
                sb.Append("signalfx.tracing.version (tag):")
                  .Append(SignalFxVersion)
                  .Append(',');
            }

            if (SignalFxLibrary != null)
            {
                sb.Append("signalfx.tracing.library (tag):")
                  .Append(SignalFxLibrary)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
        public override double? GetMetric(string key)
        {
            return key switch
            {
                "_sampling_priority_v1" => SamplingPriority,
                "_dd.limit_psr" => SamplingLimitDecision,
                "_dd.tracer_kr" => TracesKeepRate,
                _ => base.GetMetric(key),
            };
        }

        public override void SetMetric(string key, double? value)
        {
            switch(key)
            {
                case "_sampling_priority_v1": 
                    SamplingPriority = value;
                    break;
                case "_dd.limit_psr": 
                    SamplingLimitDecision = value;
                    break;
                case "_dd.tracer_kr": 
                    TracesKeepRate = value;
                    break;
                default: 
                    base.SetMetric(key, value);
                    break;
            }
        }

        protected override int WriteAdditionalMetrics(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SamplingPriority != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, SamplingPriorityBytes, SamplingPriority.Value, tagProcessors);
            }

            if (SamplingLimitDecision != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, SamplingLimitDecisionBytes, SamplingLimitDecision.Value, tagProcessors);
            }

            if (TracesKeepRate != null)
            {
                count++;
                WriteMetric(ref bytes, ref offset, TracesKeepRateBytes, TracesKeepRate.Value, tagProcessors);
            }

            return count + base.WriteAdditionalMetrics(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalMetrics(System.Text.StringBuilder sb)
        {
            if (SamplingPriority != null)
            {
                sb.Append("_sampling_priority_v1 (metric):")
                  .Append(SamplingPriority.Value)
                  .Append(',');
            }

            if (SamplingLimitDecision != null)
            {
                sb.Append("_dd.limit_psr (metric):")
                  .Append(SamplingLimitDecision.Value)
                  .Append(',');
            }

            if (TracesKeepRate != null)
            {
                sb.Append("_dd.tracer_kr (metric):")
                  .Append(TracesKeepRate.Value)
                  .Append(',');
            }

            base.WriteAdditionalMetrics(sb);
        }
    }
}
