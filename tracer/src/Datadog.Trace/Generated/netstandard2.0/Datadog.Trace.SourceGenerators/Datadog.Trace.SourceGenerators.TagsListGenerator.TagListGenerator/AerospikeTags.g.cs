// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.Tagging
{
    partial class AerospikeTags
    {
        // SpanKindBytes = System.Text.Encoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] SpanKindBytes = new byte[] { 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationNameBytes = System.Text.Encoding.UTF8.GetBytes("component");
        private static readonly byte[] InstrumentationNameBytes = new byte[] { 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // DbTypeBytes = System.Text.Encoding.UTF8.GetBytes("db.system");
        private static readonly byte[] DbTypeBytes = new byte[] { 100, 98, 46, 115, 121, 115, 116, 101, 109 };
        // KeyBytes = System.Text.Encoding.UTF8.GetBytes("db.aerospike.key");
        private static readonly byte[] KeyBytes = new byte[] { 100, 98, 46, 97, 101, 114, 111, 115, 112, 105, 107, 101, 46, 107, 101, 121 };
        // NamespaceBytes = System.Text.Encoding.UTF8.GetBytes("db.aerospike.namespace");
        private static readonly byte[] NamespaceBytes = new byte[] { 100, 98, 46, 97, 101, 114, 111, 115, 112, 105, 107, 101, 46, 110, 97, 109, 101, 115, 112, 97, 99, 101 };
        // SetNameBytes = System.Text.Encoding.UTF8.GetBytes("db.aerospike.setname");
        private static readonly byte[] SetNameBytes = new byte[] { 100, 98, 46, 97, 101, 114, 111, 115, 112, 105, 107, 101, 46, 115, 101, 116, 110, 97, 109, 101 };
        // UserKeyBytes = System.Text.Encoding.UTF8.GetBytes("db.aerospike.userkey");
        private static readonly byte[] UserKeyBytes = new byte[] { 100, 98, 46, 97, 101, 114, 111, 115, 112, 105, 107, 101, 46, 117, 115, 101, 114, 107, 101, 121 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "db.system" => DbType,
                "db.aerospike.key" => Key,
                "db.aerospike.namespace" => Namespace,
                "db.aerospike.setname" => SetName,
                "db.aerospike.userkey" => UserKey,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "db.aerospike.key": 
                    Key = value;
                    break;
                case "db.aerospike.namespace": 
                    Namespace = value;
                    break;
                case "db.aerospike.setname": 
                    SetName = value;
                    break;
                case "db.aerospike.userkey": 
                    UserKey = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected static Datadog.Trace.Tagging.IProperty<string?>[] AerospikeTagsProperties => 
             Datadog.Trace.ExtensionMethods.ArrayExtensions.Concat(InstrumentationTagsProperties,
                new Datadog.Trace.Tagging.Property<AerospikeTags, string?>("span.kind", t => t.SpanKind),
                new Datadog.Trace.Tagging.Property<AerospikeTags, string?>("component", t => t.InstrumentationName),
                new Datadog.Trace.Tagging.Property<AerospikeTags, string?>("db.system", t => t.DbType),
                new Datadog.Trace.Tagging.Property<AerospikeTags, string?>("db.aerospike.key", t => t.Key),
                new Datadog.Trace.Tagging.Property<AerospikeTags, string?>("db.aerospike.namespace", t => t.Namespace),
                new Datadog.Trace.Tagging.Property<AerospikeTags, string?>("db.aerospike.setname", t => t.SetName),
                new Datadog.Trace.Tagging.Property<AerospikeTags, string?>("db.aerospike.userkey", t => t.UserKey)
        );

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (DbType is not null)
            {
                processor.Process(new TagItem<string>("db.system", DbType, DbTypeBytes));
            }

            if (Key is not null)
            {
                processor.Process(new TagItem<string>("db.aerospike.key", Key, KeyBytes));
            }

            if (Namespace is not null)
            {
                processor.Process(new TagItem<string>("db.aerospike.namespace", Namespace, NamespaceBytes));
            }

            if (SetName is not null)
            {
                processor.Process(new TagItem<string>("db.aerospike.setname", SetName, SetNameBytes));
            }

            if (UserKey is not null)
            {
                processor.Process(new TagItem<string>("db.aerospike.userkey", UserKey, UserKeyBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override Datadog.Trace.Tagging.IProperty<string?>[] GetAdditionalTags()
        {
             return AerospikeTagsProperties;
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SpanKind is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (DbType is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DbTypeBytes, DbType, tagProcessors);
            }

            if (Key is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, KeyBytes, Key, tagProcessors);
            }

            if (Namespace is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, NamespaceBytes, Namespace, tagProcessors);
            }

            if (SetName is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SetNameBytes, SetName, tagProcessors);
            }

            if (UserKey is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, UserKeyBytes, UserKey, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (DbType is not null)
            {
                sb.Append("db.system (tag):")
                  .Append(DbType)
                  .Append(',');
            }

            if (Key is not null)
            {
                sb.Append("db.aerospike.key (tag):")
                  .Append(Key)
                  .Append(',');
            }

            if (Namespace is not null)
            {
                sb.Append("db.aerospike.namespace (tag):")
                  .Append(Namespace)
                  .Append(',');
            }

            if (SetName is not null)
            {
                sb.Append("db.aerospike.setname (tag):")
                  .Append(SetName)
                  .Append(',');
            }

            if (UserKey is not null)
            {
                sb.Append("db.aerospike.userkey (tag):")
                  .Append(UserKey)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
