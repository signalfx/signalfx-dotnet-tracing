// <auto-generated/>
#nullable enable

namespace Datadog.Trace.Tagging
{
    partial class WebTags
    {
        private static readonly byte[] SpanKindBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] HttpMethodBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("http.method");
        private static readonly byte[] HttpRequestHeadersHostBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("http.host");
        private static readonly byte[] HttpUrlBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("http.url");
        private static readonly byte[] PeerIpBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("net.peer.ip");
        private static readonly byte[] LanguageBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("language");
        private static readonly byte[] HttpStatusCodeBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("http.status_code");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "http.method" => HttpMethod,
                "http.host" => HttpRequestHeadersHost,
                "http.url" => HttpUrl,
                "net.peer.ip" => PeerIp,
                "language" => Language,
                "http.status_code" => HttpStatusCode,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "http.method": 
                    HttpMethod = value;
                    break;
                case "http.host": 
                    HttpRequestHeadersHost = value;
                    break;
                case "http.url": 
                    HttpUrl = value;
                    break;
                case "net.peer.ip": 
                    PeerIp = value;
                    break;
                case "http.status_code": 
                    HttpStatusCode = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected static Datadog.Trace.Tagging.IProperty<string?>[] WebTagsProperties => 
             Datadog.Trace.ExtensionMethods.ArrayExtensions.Concat(InstrumentationTagsProperties,
                new Datadog.Trace.Tagging.Property<WebTags, string?>("span.kind", t => t.SpanKind),
                new Datadog.Trace.Tagging.Property<WebTags, string?>("http.method", t => t.HttpMethod),
                new Datadog.Trace.Tagging.Property<WebTags, string?>("http.host", t => t.HttpRequestHeadersHost),
                new Datadog.Trace.Tagging.Property<WebTags, string?>("http.url", t => t.HttpUrl),
                new Datadog.Trace.Tagging.Property<WebTags, string?>("net.peer.ip", t => t.PeerIp),
                new Datadog.Trace.Tagging.Property<WebTags, string?>("language", t => t.Language),
                new Datadog.Trace.Tagging.Property<WebTags, string?>("http.status_code", t => t.HttpStatusCode)
);

        protected override Datadog.Trace.Tagging.IProperty<string?>[] GetAdditionalTags()
        {
             return WebTagsProperties;
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset)
        {
            var count = 0;
            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind);
            }

            if (HttpMethod != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, HttpMethodBytes, HttpMethod);
            }

            if (HttpRequestHeadersHost != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, HttpRequestHeadersHostBytes, HttpRequestHeadersHost);
            }

            if (HttpUrl != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, HttpUrlBytes, HttpUrl);
            }

            if (PeerIp != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, PeerIpBytes, PeerIp);
            }

            if (Language != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, LanguageBytes, Language);
            }

            if (HttpStatusCode != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, HttpStatusCodeBytes, HttpStatusCode);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (HttpMethod != null)
            {
                sb.Append("http.method (tag):")
                  .Append(HttpMethod)
                  .Append(',');
            }

            if (HttpRequestHeadersHost != null)
            {
                sb.Append("http.host (tag):")
                  .Append(HttpRequestHeadersHost)
                  .Append(',');
            }

            if (HttpUrl != null)
            {
                sb.Append("http.url (tag):")
                  .Append(HttpUrl)
                  .Append(',');
            }

            if (PeerIp != null)
            {
                sb.Append("net.peer.ip (tag):")
                  .Append(PeerIp)
                  .Append(',');
            }

            if (Language != null)
            {
                sb.Append("language (tag):")
                  .Append(Language)
                  .Append(',');
            }

            if (HttpStatusCode != null)
            {
                sb.Append("http.status_code (tag):")
                  .Append(HttpStatusCode)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
