// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;
using Datadog.Trace.Tagging;

namespace Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch
{
    partial class ElasticsearchTags
    {
        // SpanKindBytes = System.Text.Encoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] SpanKindBytes = new byte[] { 115, 112, 97, 110, 46, 107, 105, 110, 100 };
        // InstrumentationNameBytes = System.Text.Encoding.UTF8.GetBytes("component");
        private static readonly byte[] InstrumentationNameBytes = new byte[] { 99, 111, 109, 112, 111, 110, 101, 110, 116 };
        // DbTypeBytes = System.Text.Encoding.UTF8.GetBytes("db.system");
        private static readonly byte[] DbTypeBytes = new byte[] { 100, 98, 46, 115, 121, 115, 116, 101, 109 };
        // ActionBytes = System.Text.Encoding.UTF8.GetBytes("elasticsearch.action");
        private static readonly byte[] ActionBytes = new byte[] { 101, 108, 97, 115, 116, 105, 99, 115, 101, 97, 114, 99, 104, 46, 97, 99, 116, 105, 111, 110 };
        // MethodBytes = System.Text.Encoding.UTF8.GetBytes("db.operation");
        private static readonly byte[] MethodBytes = new byte[] { 100, 98, 46, 111, 112, 101, 114, 97, 116, 105, 111, 110 };
        // UrlBytes = System.Text.Encoding.UTF8.GetBytes("elasticsearch.url");
        private static readonly byte[] UrlBytes = new byte[] { 101, 108, 97, 115, 116, 105, 99, 115, 101, 97, 114, 99, 104, 46, 117, 114, 108 };
        // DbStatementBytes = System.Text.Encoding.UTF8.GetBytes("db.statement");
        private static readonly byte[] DbStatementBytes = new byte[] { 100, 98, 46, 115, 116, 97, 116, 101, 109, 101, 110, 116 };

        public override string? GetTag(string key)
        {
            return key switch
            {
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "db.system" => DbType,
                "elasticsearch.action" => Action,
                "db.operation" => Method,
                "elasticsearch.url" => Url,
                "db.statement" => DbStatement,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "elasticsearch.action": 
                    Action = value;
                    break;
                case "db.operation": 
                    Method = value;
                    break;
                case "elasticsearch.url": 
                    Url = value;
                    break;
                case "db.statement": 
                    DbStatement = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected static Datadog.Trace.Tagging.IProperty<string?>[] ElasticsearchTagsProperties => 
             Datadog.Trace.ExtensionMethods.ArrayExtensions.Concat(InstrumentationTagsProperties,
                new Datadog.Trace.Tagging.Property<ElasticsearchTags, string?>("span.kind", t => t.SpanKind),
                new Datadog.Trace.Tagging.Property<ElasticsearchTags, string?>("component", t => t.InstrumentationName),
                new Datadog.Trace.Tagging.Property<ElasticsearchTags, string?>("db.system", t => t.DbType),
                new Datadog.Trace.Tagging.Property<ElasticsearchTags, string?>("elasticsearch.action", t => t.Action),
                new Datadog.Trace.Tagging.Property<ElasticsearchTags, string?>("db.operation", t => t.Method),
                new Datadog.Trace.Tagging.Property<ElasticsearchTags, string?>("elasticsearch.url", t => t.Url),
                new Datadog.Trace.Tagging.Property<ElasticsearchTags, string?>("db.statement", t => t.DbStatement)
        );

        public override void EnumerateTags<TProcessor>(ref TProcessor processor)
        {
            if (SpanKind is not null)
            {
                processor.Process(new TagItem<string>("span.kind", SpanKind, SpanKindBytes));
            }

            if (InstrumentationName is not null)
            {
                processor.Process(new TagItem<string>("component", InstrumentationName, InstrumentationNameBytes));
            }

            if (DbType is not null)
            {
                processor.Process(new TagItem<string>("db.system", DbType, DbTypeBytes));
            }

            if (Action is not null)
            {
                processor.Process(new TagItem<string>("elasticsearch.action", Action, ActionBytes));
            }

            if (Method is not null)
            {
                processor.Process(new TagItem<string>("db.operation", Method, MethodBytes));
            }

            if (Url is not null)
            {
                processor.Process(new TagItem<string>("elasticsearch.url", Url, UrlBytes));
            }

            if (DbStatement is not null)
            {
                processor.Process(new TagItem<string>("db.statement", DbStatement, DbStatementBytes));
            }

            base.EnumerateTags(ref processor);
        }

        protected override Datadog.Trace.Tagging.IProperty<string?>[] GetAdditionalTags()
        {
             return ElasticsearchTagsProperties;
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (SpanKind is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (DbType is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DbTypeBytes, DbType, tagProcessors);
            }

            if (Action is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, ActionBytes, Action, tagProcessors);
            }

            if (Method is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MethodBytes, Method, tagProcessors);
            }

            if (Url is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, UrlBytes, Url, tagProcessors);
            }

            if (DbStatement is not null)
            {
                count++;
                WriteTag(ref bytes, ref offset, DbStatementBytes, DbStatement, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (SpanKind is not null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName is not null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (DbType is not null)
            {
                sb.Append("db.system (tag):")
                  .Append(DbType)
                  .Append(',');
            }

            if (Action is not null)
            {
                sb.Append("elasticsearch.action (tag):")
                  .Append(Action)
                  .Append(',');
            }

            if (Method is not null)
            {
                sb.Append("db.operation (tag):")
                  .Append(Method)
                  .Append(',');
            }

            if (Url is not null)
            {
                sb.Append("elasticsearch.url (tag):")
                  .Append(Url)
                  .Append(',');
            }

            if (DbStatement is not null)
            {
                sb.Append("db.statement (tag):")
                  .Append(DbStatement)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
