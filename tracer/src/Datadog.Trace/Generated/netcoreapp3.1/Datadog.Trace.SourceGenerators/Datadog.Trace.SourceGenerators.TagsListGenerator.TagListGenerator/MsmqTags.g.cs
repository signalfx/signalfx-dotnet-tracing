// <auto-generated/>
#nullable enable

using Datadog.Trace.Processors;

namespace Datadog.Trace.Tagging
{
    partial class MsmqTags
    {
        private static readonly byte[] CommandBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("msmq.command");
        private static readonly byte[] SpanKindBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("span.kind");
        private static readonly byte[] InstrumentationNameBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("component");
        private static readonly byte[] PathBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("msmq.queue.path");
        private static readonly byte[] MessageWithTransactionBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("msmq.message.transactional");
        private static readonly byte[] IsTransactionalQueueBytes = Datadog.Trace.Vendors.MessagePack.StringEncoding.UTF8.GetBytes("msmq.queue.transactional");

        public override string? GetTag(string key)
        {
            return key switch
            {
                "msmq.command" => Command,
                "span.kind" => SpanKind,
                "component" => InstrumentationName,
                "msmq.queue.path" => Path,
                "msmq.message.transactional" => MessageWithTransaction,
                "msmq.queue.transactional" => IsTransactionalQueue,
                _ => base.GetTag(key),
            };
        }

        public override void SetTag(string key, string value)
        {
            switch(key)
            {
                case "msmq.command": 
                    Command = value;
                    break;
                case "msmq.queue.path": 
                    Path = value;
                    break;
                case "msmq.message.transactional": 
                    MessageWithTransaction = value;
                    break;
                case "msmq.queue.transactional": 
                    IsTransactionalQueue = value;
                    break;
                default: 
                    base.SetTag(key, value);
                    break;
            }
        }

        protected static Datadog.Trace.Tagging.IProperty<string?>[] MsmqTagsProperties => 
             Datadog.Trace.ExtensionMethods.ArrayExtensions.Concat(InstrumentationTagsProperties,
                new Datadog.Trace.Tagging.Property<MsmqTags, string?>("msmq.command", t => t.Command),
                new Datadog.Trace.Tagging.Property<MsmqTags, string?>("span.kind", t => t.SpanKind),
                new Datadog.Trace.Tagging.Property<MsmqTags, string?>("component", t => t.InstrumentationName),
                new Datadog.Trace.Tagging.Property<MsmqTags, string?>("msmq.queue.path", t => t.Path),
                new Datadog.Trace.Tagging.Property<MsmqTags, string?>("msmq.message.transactional", t => t.MessageWithTransaction),
                new Datadog.Trace.Tagging.Property<MsmqTags, string?>("msmq.queue.transactional", t => t.IsTransactionalQueue)
);

        protected override Datadog.Trace.Tagging.IProperty<string?>[] GetAdditionalTags()
        {
             return MsmqTagsProperties;
        }

        protected override int WriteAdditionalTags(ref byte[] bytes, ref int offset, ITagProcessor[] tagProcessors)
        {
            var count = 0;
            if (Command != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, CommandBytes, Command, tagProcessors);
            }

            if (SpanKind != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, SpanKindBytes, SpanKind, tagProcessors);
            }

            if (InstrumentationName != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, InstrumentationNameBytes, InstrumentationName, tagProcessors);
            }

            if (Path != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, PathBytes, Path, tagProcessors);
            }

            if (MessageWithTransaction != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, MessageWithTransactionBytes, MessageWithTransaction, tagProcessors);
            }

            if (IsTransactionalQueue != null)
            {
                count++;
                WriteTag(ref bytes, ref offset, IsTransactionalQueueBytes, IsTransactionalQueue, tagProcessors);
            }

            return count + base.WriteAdditionalTags(ref bytes, ref offset, tagProcessors);
        }

        protected override void WriteAdditionalTags(System.Text.StringBuilder sb)
        {
            if (Command != null)
            {
                sb.Append("msmq.command (tag):")
                  .Append(Command)
                  .Append(',');
            }

            if (SpanKind != null)
            {
                sb.Append("span.kind (tag):")
                  .Append(SpanKind)
                  .Append(',');
            }

            if (InstrumentationName != null)
            {
                sb.Append("component (tag):")
                  .Append(InstrumentationName)
                  .Append(',');
            }

            if (Path != null)
            {
                sb.Append("msmq.queue.path (tag):")
                  .Append(Path)
                  .Append(',');
            }

            if (MessageWithTransaction != null)
            {
                sb.Append("msmq.message.transactional (tag):")
                  .Append(MessageWithTransaction)
                  .Append(',');
            }

            if (IsTransactionalQueue != null)
            {
                sb.Append("msmq.queue.transactional (tag):")
                  .Append(IsTransactionalQueue)
                  .Append(',');
            }

            base.WriteAdditionalTags(sb);
        }
    }
}
