<!-- Modified by SignalFx -->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
  </PropertyGroup>

  <ItemGroup>
    <CsharpProject Include="src\**\*.csproj"/>
    <CsharpTestProject Include="test\**\*.csproj"/>
    <CppProject Include="src\**\*.vcxproj"/>
    <CppTestProject Include="test\**\*.vcxproj"/>
    <SampleProject Include="samples*\**\*.csproj"/>
    <SampleLibProject Include="sample-libs\**\*.csproj"/>
    <WindowsInstallerProject Include="deploy\**\*.wixproj"/>
  </ItemGroup>

  <ItemGroup>
    <FrameworkReproduction Include="reproductions\EntityFramework6x.MdTokenLookupFailure\EntityFramework6x.MdTokenLookupFailure.csproj" />
    <FrameworkReproduction Include="reproductions\StackExchange.Redis.AssemblyConflict.LegacyProject\StackExchange.Redis.AssemblyConflict.LegacyProject.csproj" />
  </ItemGroup>

  <Import Condition="'$(PerformComprehensiveTesting)'=='true'" Project="PackageVersionsComprehensive.g.props" />
  <Import Condition="'$(PerformComprehensiveTesting)'!='true'" Project="PackageVersionsLatestMinors.g.props" />

  <Target Name="Restore">
    <MSBuild Targets="Restore" Projects="@(CsharpProject);@(CsharpTestProject);@(CppProject);@(CppTestProject);@(SampleProject)"/>
  </Target>

  <Target Name="Clean">
    <MSBuild Targets="Clean" Projects="@(CsharpProject);@(CsharpTestProject);@(CppProject);@(CppTestProject);@(SampleProject);@(WindowsInstallerProject)"/>
  </Target>

  <!-- default target -->
  <Target Name="Build">
    <MSBuild Targets="Build" Projects="@(CsharpProject);@(CsharpTestProject);@(CppProject);@(CppTestProject)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="BuildFrameworkReproductions">
    <MSBuild Targets="Build" Projects="@(FrameworkReproduction)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="BuildCsharp">
    <MSBuild Targets="Build" Projects="@(CsharpProject)" RemoveProperties="Platform">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="BuildCsharpTests">
    <MSBuild Targets="Build" Projects="@(CsharpTestProject)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="BuildCpp">
    <MSBuild Targets="Build" Projects="@(CppProject)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>

    <MSBuild Targets="Build" Projects="@(CppProject)" Condition="'$(BuildAdditionalx86Profiler)' == 'true'" Properties="Platform=x86">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="BuildCppTests">
    <MSBuild Targets="Build" Projects="@(CppTestProject)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="RestoreAndBuildSamplesForPackageVersions" Condition="'$(TestAllPackageVersions)'=='true'">

    <!-- Build the core C# projects first, so that the sample project builds do not need to build them and can be run
         concurrently -->
    <MSBuild Targets="Restore" Projects="@(CsharpProject)" BuildInParallel="false" RemoveProperties="TargetFramework;Platform">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
    <MSBuild Targets="Build" Projects="@(CsharpProject)" BuildInParallel="false" RemoveProperties="TargetFramework;Platform">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>

    <!-- Build the sample-libs projects next in case any sample projects rely on them -->
    <MSBuild Targets="Restore" Projects="@(SampleLibProject)" BuildInParallel="false" RemoveProperties="TargetFramework">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
    <MSBuild Targets="Build" Projects="@(SampleLibProject)" BuildInParallel="false" RemoveProperties="TargetFramework">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>

    <!-- Filter the sample projects by TargetFramework -->
    <ItemGroup>
      <PackageVersionSampleCompile Include="@(PackageVersionSample)" Condition="'%(PackageVersionSample.TargetFramework)' == '' or '%(PackageVersionSample.TargetFramework)'=='$(TargetFramework)'" />
    </ItemGroup>

    <!-- Build the sample projects concurrently -->
    <MSBuild Targets="Restore" Projects="@(PackageVersionSampleCompile)" BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
    <MSBuild Targets="Publish" Projects="@(PackageVersionSampleCompile)" BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="BuildSamples" DependsOnTargets="RestoreAndBuildSamplesForPackageVersions">
    <MSBuild Targets="Build" Projects="@(SampleProject)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="SetMsiProperties">
    <PropertyGroup>
      <BuildAdditionalx86Profiler Condition="'$(Platform)' == 'x64'">true</BuildAdditionalx86Profiler>
    </PropertyGroup>
  </Target>

  <Target Name="PublishManagedProfilerOnDisk">
    <ItemGroup>
      <ManagedProfilerPublishProject Include="src\Datadog.Trace.ClrProfiler.Managed\Datadog.Trace.ClrProfiler.Managed.csproj">
        <Properties>TargetFramework=net45;PublishDir=$(MSBuildThisFileDirectory)\src\bin\managed-publish\net45</Properties>
      </ManagedProfilerPublishProject>

      <ManagedProfilerPublishProject Include="src\Datadog.Trace.ClrProfiler.Managed\Datadog.Trace.ClrProfiler.Managed.csproj">
        <Properties>TargetFramework=net461;PublishDir=$(MSBuildThisFileDirectory)\src\bin\managed-publish\net461</Properties>
      </ManagedProfilerPublishProject>

      <ManagedProfilerPublishProject Include="src\Datadog.Trace.ClrProfiler.Managed\Datadog.Trace.ClrProfiler.Managed.csproj">
        <Properties>TargetFramework=netstandard2.0;PublishDir=$(MSBuildThisFileDirectory)\src\bin\managed-publish\netstandard2.0</Properties>
      </ManagedProfilerPublishProject>
    </ItemGroup>

    <MSBuild Targets="Publish" Projects="@(ManagedProfilerPublishProject)" BuildInParallel="$(BuildInParallel)" RemoveProperties="Platform">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>

  <Target Name="Msi" DependsOnTargets="SetMsiProperties;BuildCsharp;BuildCpp;PublishManagedProfilerOnDisk">
    <MSBuild Targets="Build" Projects="@(WindowsInstallerProject)">
      <Output TaskParameter="TargetOutputs" ItemName="CollectedBuildOutput"/>
    </MSBuild>
  </Target>
  
  <Target Name="CreateHomeDirectory" DependsOnTargets="BuildCsharp;BuildCpp;PublishManagedProfilerOnDisk">
      <ItemGroup>
	    <PublishedManagedTracerFiles Include="$(MSBuildThisFileDirectory)src\bin\managed-publish\**\*.*" />
      </ItemGroup>
	  <PropertyGroup>
	    <WindowsHomeOutput>$(MSBuildThisFileDirectory)src\bin\windows-tracer-home</WindowsHomeOutput>
	  </PropertyGroup>
      <Copy 
        SourceFiles="$(MSBuildThisFileDirectory)integrations.json" 
        DestinationFolder="$(WindowsHomeOutput)" 
		SkipUnchangedFiles="true"
        Retries="3"
        RetryDelayMilliseconds="300"/>
      <Copy 
	    SourceFiles="@(PublishedManagedTracerFiles)"
        DestinationFiles="@(PublishedManagedTracerFiles->'$(WindowsHomeOutput)\%(RecursiveDir)%(Filename)%(Extension)')"
		SkipUnchangedFiles="true"
        Retries="3"
        RetryDelayMilliseconds="300"/>
      <Copy 
        SourceFiles="$(MSBuildThisFileDirectory)src\Datadog.Trace.ClrProfiler.Native\bin\Release\x64\SignalFx.Tracing.ClrProfiler.Native.dll" 
        DestinationFolder="$(WindowsHomeOutput)\x64" 
		SkipUnchangedFiles="true"
        Retries="3"
        RetryDelayMilliseconds="300"/>
      <Copy 
        SourceFiles="$(MSBuildThisFileDirectory)src\Datadog.Trace.ClrProfiler.Native\bin\Release\x86\SignalFx.Tracing.ClrProfiler.Native.dll" 
        DestinationFolder="$(WindowsHomeOutput)\x86" 
		SkipUnchangedFiles="true"
        Retries="3"
        RetryDelayMilliseconds="300"/>
	  <Delete Files="$(WindowsHomeOutput).zip" />
	  <ZipDirectory
        SourceDirectory="$(WindowsHomeOutput)"
        DestinationFile="$(WindowsHomeOutput).zip" />
  </Target>
</Project>