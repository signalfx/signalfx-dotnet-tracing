trigger:
  branches:
    include:
      - '*'
    exclude:
      - refs/pull/*/head
  paths:
    exclude:
      - docs/*
      - .github/*

variables:
  buildConfiguration: Debug
  publishOutput: $(Build.SourcesDirectory)/src/bin/managed-publish

jobs:

- job: Linux
  strategy:
    matrix:
      netcoreapp2_1:
        dotnetCoreSdkVersion: 2.1.x
        publishTargetFramework: netcoreapp2.1
      netcoreapp3_0:
        dotnetCoreSdkVersion: 3.0.x
        publishTargetFramework: netcoreapp3.0
      netcoreapp3_1:
        dotnetCoreSdkVersion: 3.1.302
        publishTargetFramework: netcoreapp3.1
      net5_0:
        dotnetCoreSdkVersion: 5.0.x
        publishTargetFramework: net5.0

  pool:
    vmImage: ubuntu-18.04
  
  variables:
    TestAllPackageVersions: true

  steps:
  - task: DockerCompose@0
    displayName: docker-compose run build
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) -e publishTargetFramework=$(publishTargetFramework) build

  - task: DockerCompose@0
    displayName: docker-compose run Profiler
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) -e publishTargetFramework=$(publishTargetFramework) IntegrationTests

  - task: PublishTestResults@2
    displayName: publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/**/*.trx
    condition: succeededOrFailed()

- job: Alpine_Linux
  strategy:
    matrix:
      netcoreapp2_1:
        dotnetCoreSdkVersion: 2.1.x
        publishTargetFramework: netcoreapp2.1
      netcoreapp3_0:
        dotnetCoreSdkVersion: 3.0.x
        publishTargetFramework: netcoreapp3.0
      netcoreapp3_1:
        dotnetCoreSdkVersion: 3.1.302
        publishTargetFramework: netcoreapp3.1
      net5_0:
        dotnetCoreSdkVersion: 5.0.x
        publishTargetFramework: net5.0

  pool:
    vmImage: ubuntu-18.04
  
  variables:
    TestAllPackageVersions: true

  steps:
  - task: DockerCompose@0
    displayName: docker-compose run build
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) -e publishTargetFramework=$(publishTargetFramework) build

  - task: DockerCompose@0
    displayName: docker-compose run Profiler.Alpine
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler.Alpine

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests.Alpine.Core21
    condition: eq(variables['publishTargetFramework'], 'netcoreapp2.1')
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) IntegrationTests.Alpine.Core21

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests.Alpine.Core30
    condition: eq(variables['publishTargetFramework'], 'netcoreapp3.0')
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) IntegrationTests.Alpine.Core30

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests.Alpine.Core31
    condition: eq(variables['publishTargetFramework'], 'netcoreapp3.1')
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) IntegrationTests.Alpine.Core31

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests.Alpine.Core50
    condition: eq(variables['publishTargetFramework'], 'net5.0')
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) IntegrationTests.Alpine.Core50

  - task: PublishTestResults@2
    displayName: publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/**/*.trx
    condition: succeededOrFailed()

- job: Windows
  strategy:
    matrix:
      x64:
        buildPlatform: x64
        programFileDir: "C:\\Program Files\\dotnet"
      x86:
        buildPlatform: x86
        programFileDir: "C:\\Program Files (x86)\\dotnet"
  pool:
    vmImage: windows-2019

  steps:
  - powershell: |
      Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
    displayName: Download dotnet-install.ps1 script

  - powershell: |
      ./dotnet-install.ps1 -Channel 2.1 -Architecture ${Env:architecture} -InstallDir "${Env:installDir}";
    displayName: install dotnet core sdk 2.1
    env:
      architecture: $(buildPlatform)
      installDir: $(programFileDir)

  - powershell: |
      ./dotnet-install.ps1 -Channel 3.0 -Architecture ${Env:architecture} -InstallDir "${Env:installDir}";
    displayName: install dotnet core sdk 3.0
    env:
      architecture: $(buildPlatform)
      installDir: $(programFileDir)

  - powershell: |
      ./dotnet-install.ps1 -Channel 3.1 -Architecture ${Env:architecture} -InstallDir "${Env:installDir}";
    displayName: install dotnet core sdk 3.1
    env:
      architecture: $(buildPlatform)
      installDir: $(programFileDir)

  - powershell: |
      ./dotnet-install.ps1 -Channel 5.0 -Architecture ${Env:architecture} -InstallDir "${Env:installDir}";
    displayName: install dotnet core sdk 5.0
    env:
      architecture: $(buildPlatform)
      installDir: $(programFileDir)

  - task: NuGetToolInstaller@1
    displayName: install nuget

  - task: NuGetCommand@2
    displayName: nuget restore
    inputs:
      restoreSolution: Datadog.Trace.sln
      verbosityRestore: Normal

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed --framework net45
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework net45 --output $(publishOutput)/net45

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed --framework net461
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework net461 --output $(publishOutput)/net461

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed --framework netstandard2.0
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(publishOutput)/netstandard2.0

  - task: DotNetCoreCLI@2
    displayName: dotnet build Datadog.Trace.ClrProfiler.Managed.Loader
    inputs:
      command: build
      projects: src/Datadog.Trace.ClrProfiler.Managed.Loader/Datadog.Trace.ClrProfiler.Managed.Loader.csproj
      arguments: --configuration $(buildConfiguration)

  - task: MSBuild@1
    displayName: msbuild native
    inputs:
      solution: Datadog.Trace.proj
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
      msbuildArguments: /t:BuildCpp
      maximumCpuCount: true

  - task: MSBuild@1
    displayName: 'Build .NET Framework projects (not SDK-based projects)'
    inputs:
      solution: Datadog.Trace.proj
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/t:BuildFrameworkReproductions'
      maximumCpuCount: true

  - powershell: |
      [System.Reflection.Assembly]::Load("System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
      $publish = New-Object System.EnterpriseServices.Internal.Publish
      Get-ChildItem $(publishOutput)/net45 -Filter *.dll | Foreach-Object { $publish.GacInstall($_.FullName) }
    displayName: Add net45 Datadog.Trace.ClrProfiler.Managed assets to the GAC

  - task: DotNetCoreCLI@2
    displayName: dotnet build integration tests
    inputs:
      command: build
      projects: |
        benchmarks/**/*.csproj
        customer-samples/**/*.csproj
        reproductions/**/*.csproj
        samples/**/*.csproj
        test/Datadog.Trace.IntegrationTests/Datadog.Trace.IntegrationTests.csproj
        test/Datadog.Trace.ClrProfiler.IntegrationTests/Datadog.Trace.ClrProfiler.IntegrationTests.csproj
        test/Datadog.Trace.OpenTracing.IntegrationTests/Datadog.Trace.OpenTracing.IntegrationTests.csproj
        !reproductions/**/ExpenseItDemo*.csproj
        !reproductions/**/EntityFramework6x*.csproj
        !reproductions/**/StackExchange.Redis.AssemblyConflict.LegacyProject.csproj
      arguments: --configuration $(buildConfiguration) -p:Platform=$(buildPlatform) -p:ManagedProfilerOutputDirectory=$(publishOutput)

  - script: |
      "%installDir%\dotnet.exe" test -c %config% -p:Platform=%architecture% --blame-hang --blame-hang-timeout 180s test\Datadog.Trace.IntegrationTests\Datadog.Trace.IntegrationTests.csproj
    displayName: dotnet test IntegrationTests
    env:
      architecture: $(buildPlatform)
      installDir: $(programFileDir)
      config: $(buildConfiguration)

  - script: |
      "%installDir%\dotnet.exe" test -c %config% -p:Platform=%architecture% --blame-hang --blame-hang-timeout 180s test\Datadog.Trace.OpenTracing.IntegrationTests\Datadog.Trace.OpenTracing.IntegrationTests.csproj
    displayName: dotnet test OpenTracing.IntegrationTests
    env:
      architecture: $(buildPlatform)
      installDir: $(programFileDir)
      config: $(buildConfiguration)

  - script: |
      "%installDir%\dotnet.exe" test -c %config% -p:Platform=%architecture% --filter "RunOnWindows=True|Category=Smoke" --blame-hang --blame-hang-timeout 180s test\Datadog.Trace.ClrProfiler.IntegrationTests\Datadog.Trace.ClrProfiler.IntegrationTests.csproj
    displayName: dotnet test ClrProfiler.IntegrationTests
    env:
      architecture: $(buildPlatform)
      installDir: $(programFileDir)
      config: $(buildConfiguration)
